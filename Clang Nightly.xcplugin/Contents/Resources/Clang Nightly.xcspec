/**
	Clang Nightly build task

	Copyright (c) 2000-2012 Apple Inc.	All rights reserved.
*/

(
	{
		Identifier = "com.apple.compilers.llvm.clang.nightly";
		Type = Compiler;
		Class = "XCCompilerSpecificationClang";
		Name = "Clang Nightly";
		Description = "Clang Nightly Build";
		Vendor = Apple;
		Version = "3.3";
		IsAbstract = NO;
		ShowInCompilerSelectionPopup = YES;
		FileTypes = (
			"sourcecode.c.c",
			"sourcecode.c.objc",
			"sourcecode.cpp.cpp",
			"sourcecode.cpp.objcpp",
			"sourcecode.asm",
		);
		OptionConditionFlavors = (
			arch,
			sdk,
		);
		BuiltinJambaseRuleName = ProcessC;
		ExecPath = "$(CLANG)";
		UseCPlusPlusCompilerDriverWhenBundlizing = Yes;
		CommandOutputParser = "XCSimpleBufferedCommandOutputParser";
		SupportsHeadermaps = Yes;
		DashIFlagAcceptsHeadermaps = Yes;
		SupportsIsysroot = Yes;
		SupportsPredictiveCompilation = No;
		SupportsSeparateUserHeaderPaths = Yes;
		SupportsMacOSXDeploymentTarget = Yes;
		SupportsMacOSXMinVersionFlag = Yes;
		PatternsOfFlagsNotAffectingPrecomps = (
			"-v",
			"-###",
			"-H",
			"-time",
			"-save-temps",
			"-W*",
			"-w",
		);
		MessageCategoryInfoOptions = ( "--print-diagnostic-categories" );
		Options = (
			{
				Name = CLANG;
				Type = Path;
				DefaultValue = "clang";
				Category = Base;
			},
			{
				Name = arch;
				Type = String;
				CommandLineArgs = {
					"<<otherwise>>" = (
						"-arch",
						"$(value)",
					);
				};
			},
			{
				Name = "diagnostic_message_length";
				Type = String;
				DefaultValue = 0;
				CommandLinePrefixFlag = "-fmessage-length=";
			},
			{
				Name = "print_note_include_stack";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = ("-fdiagnostics-show-note-include-stack");
					NO = ();
				};
			},
			{
				Name = "GCC_INPUT_FILETYPE";
				Type = Enumeration;
				AllowedValues = (
					automatic,
					"sourcecode.c.c",
					"sourcecode.c.objc",
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				DefaultValue = automatic;
				Category = Language;
			},
			{
				Name = "GCC_OPERATION";
				Type = Enumeration;
				AllowedValues = (
					compile,
					"generate-preprocessed",
					"generate-assembler",
					precompile,
					"separate-symbols",
				);
				DefaultValue = compile;
			},
			{
				Name = "GCC_USE_STANDARD_INCLUDE_SEARCHING";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-nostdinc",
					);
				};
				Category = Language;
			},
			{
				Name = "GCC_C_LANGUAGE_STANDARD";
				Type = Enumeration;
				AllowedValues = (
					ansi,
					c89,
					gnu89,
					c99,
					gnu99,
					c11,
					gnu11,
					"compiler-default",
				);
				DefaultValue = "compiler-default";
				CommandLineArgs = {
					ansi = (
						"-ansi",
					);
					"compiler-default" = ();
					"<<otherwise>>" = (
						"-std=$(value)",
					);
				};
				FileTypes = (
					"sourcecode.c.c",
					"sourcecode.c.objc",
				);
				Category = Language;
			},
			{
				Name = "CLANG_CXX_LANGUAGE_STANDARD";
				Type = Enumeration;
				AllowedValues = (
					"c++98",
					"gnu++98",
					"c++0x",
					"gnu++0x",
					"c++1y",
					"gnu++1y",
					"compiler-default",
				);
				DefaultValue = "compiler-default";
				CommandLineArgs = {
					"compiler-default" = ();
					/* We need these two entries that reference c++0x to
					   maintain compatibility of old build settings. */
					"c++0x" = ( "-std=c++11" );
					"gnu++0x" = ( "-std=gnu++11" );
					/* Default for everything else. */
					"<<otherwise>>" = (
						"-std=$(value)",
					);
				};
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				Category = Language;
			},
			{
				Name = "CLANG_CXX_LIBRARY";
				Type = Enumeration;
				AllowedValues = (
				  "libstdc++",
				  "libc++",
				  "compiler-default",
				);
				DefaultValue = "compiler-default";
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				CommandLineArgs = {
				  "compiler-default" = ();
				  "<<otherwise>>" = ( "-stdlib=$(value)" );
				};
				AdditionalLinkerArgs = {
				  "compiler-default" = ();
				  "<<otherwise>>" = ( "-stdlib=$(value)" );
				};
				AppearsAfter = "CLANG_CXX_LANGUAGE_STANDARD";
				Category = Language;
			},
			{
				Name = "GCC_ENABLE_OBJC_GC";
				Type = Enumeration;
				AllowedValues = (
					unsupported,
					supported,
					required,
				);
				DefaultValue = unsupported;
				CommandLineArgs = {
					unsupported = ();
					supported = (
						"-fobjc-gc",
					);
					required = (
						"-fobjc-gc-only",
					);
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
			},
			{
				Name = "CLANG_ENABLE_OBJC_ARC";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
				  YES = (
					  "-fobjc-arc",
				  );
				  NO = ();
				};
				AdditionalLinkerArgs = {
				  YES = (
					  "-fobjc-arc",
				  );
				  NO = ();
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
				Category = Language;
			},
			{
				Name = "CLANG_ENABLE_SANITIZER";
				Type = Enumeration;
				AllowedValues = (
					disabled,
					thread,
					address,
					undefined,
				);
				DefaultValue = disabled;
				CommandLineArgs = {
				  "disabled" = ();
				  // vptr support is broken on OS X as it generate ref to non exported libc++abi symbols.
				  "undefined" = ( "-fsanitize=undefined", "-fno-sanitize=vptr" );
				  "<<otherwise>>" = ( "-fsanitize=$(value)" );
				};
				// Required to tell the linker what runtime lib is required
				AdditionalLinkerArgs = {
				  "disabled" = ();
				  "<<otherwise>>" = ( "-fsanitize=$(value)" );
				};
				Category = CodeGeneration;
			},
			{
				Name = "CLANG_LINK_OBJC_RUNTIME";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = ();
				};
				// This option is passed for linking to inform the compiler
				// that the ObjC runtime must be linked in (with possible
				// backwards compatibility libraries linked in).
				AdditionalLinkerArgs = {
				  YES = ( "-fobjc-link-runtime" );
				  NO = ();
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
				Category = Language;
			},
			{
				Name = "GCC_CHAR_IS_UNSIGNED_CHAR";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-funsigned-char",
					);
					NO = ();
				};
				Category = Language;
			},
			{
				Name = "GCC_ENABLE_ASM_KEYWORD";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-fno-asm",
					);
				};
				Category = Language;
			},
			{
				Name = "GCC_ENABLE_BUILTIN_FUNCTIONS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-fno-builtin",
					);
				};
				Category = Language;
			},
			{
				Name = "GCC_ENABLE_TRIGRAPHS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-trigraphs",
					);
					NO = (
						"-Wno-trigraphs",
					);
				};
				Category = Language;
			},
			{
				Name = "GCC_ENABLE_CPP_EXCEPTIONS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-fno-exceptions",
					);
				};
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				Category = Language;
			},
			{
				Name = "GCC_ENABLE_CPP_RTTI";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-fno-rtti",
					);
				};
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				Category = Language;
			},
			{
				Name = "GCC_ENABLE_PASCAL_STRINGS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = (
						"-fpascal-strings",
					);
					NO = ();
				};
				Category = Language;
			},
			{
				Name = "GCC_SHORT_ENUMS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-fshort-enums",
					 );
					NO = ();
				};
				Category = Language;
			},
			{
				Name = "GCC_LINK_WITH_DYNAMIC_LIBRARIES";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-static",
					);
				};
				Category = Language;
			},
			{
				Name = "GCC_ENABLE_FLOATING_POINT_LIBRARY_CALLS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-msoft-float",
					);
					NO = ();
				};
				Category = Language;
			},
			{
				Name = "GCC_USE_INDIRECT_FUNCTION_CALLS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-mlong-branch",
					);
					NO = ();
				};
				Category = Language;
			},
			{
				Name = "GCC_USE_REGISTER_FUNCTION_CALLS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-mlong-calls",
					);
					NO = ();
				};
				Category = Language;
			},
			{
				Name = "GCC_PREFIX_HEADER";
				Type = String;
				DefaultValue = "";
				Category = Language;
				ConditionFlavors = ();
			},
			{
				Name = "GCC_PRECOMPILE_PREFIX_HEADER";
				Type = Boolean;
				DefaultValue = NO;
				Category = Language;
				ConditionFlavors = ();
			},
			{
				Name = "GCC_INCREASE_PRECOMPILED_HEADER_SHARING";
				Type = Boolean;
				DefaultValue = NO;
				Category = Language;
				ConditionFlavors = ();
			},
			{
				Name = "OTHER_CFLAGS";
				Type = StringList;
				FileTypes = (
					"sourcecode.c.c",
					"sourcecode.c.objc",
				);
				Category = Language;
			},
			{
				Name = "OTHER_CPLUSPLUSFLAGS";
				Type = StringList;
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				Category = Language;
			},
			{
				Name = "GCC_GENERATE_DEBUGGING_SYMBOLS";
				Type = Boolean;
				DefaultValue = YES;
				Category = CodeGeneration;
			},
			{
				Name = "GCC_OPTIMIZATION_LEVEL";
				Type = Enumeration;
				AllowedValues = (
					0,
					1,
					2,
					3,
					s,
				);
				DefaultValue = s;
				CommandLineArgs = (
					"-O$(value)",
				);
				Category = CodeGeneration;
			},
			{
				Name = "CLANG_ENABLE_VECTORIZER";
				Type = Enumeration;
				AllowedValues = (
					"compiler-default",
					YES,
					NO,
				);
				DefaultValue = "compiler-default";
				CommandLineArgs = {
					"compiler-default" = ();
					YES = (
						"-fvectorize",
					);
					NO = (
						"-fno-vectorize",
					);
				};
				Category = CodeGeneration;
			},
			{
				Name = "CLANG_ENABLE_SLP_VECTORIZER";
				Type = Enumeration;
				AllowedValues = (
					NO,
					YES,
					AGGRESSIVE,
				);
				DefaultValue = NO;
				CommandLineArgs = {
					NO = ();
					YES = (
						"-fslp-vectorize",
					);
					AGGRESSIVE = (
						"-fslp-vectorize-aggressive",
					);
				};
				Category = CodeGeneration;
			},
			{
				Name = "LLVM_LTO";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-flto",
					);
					NO = ();
				};
				Category = CodeGeneration;
			},
			{
				Name = "GCC_NO_COMMON_BLOCKS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-fno-common",
					);
					NO = ();
				};
				Category = CodeGeneration;
			},
			{
				Name = "GCC_REUSE_STRINGS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-fwritable-strings",
					);
				};
				Category = CodeGeneration;
			},
			{
				Name = "GCC_DYNAMIC_NO_PIC";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-mdynamic-no-pic",
					);
					NO = ();
				};
				Category = CodeGeneration;
			},
			{
				Name = "GCC_ENABLE_KERNEL_DEVELOPMENT";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-mkernel",
					);
					NO = ();
				};
				Category = CodeGeneration;
				Description = "Activating this setting enables kernel development mode.	 This mode sets -static, -fno-common, -fno-cxa-atexit, -fno-exceptions, -fno-non-call-exceptions, -fapple-kext, -fno-weak and -fno-rtti where applicable.  This mode also sets -mno-altivec, -msoft-float, -fno-builtin and -mlong-branch for PowerPC targets. [GCC_ENABLE_KERNEL_DEVELOPMENT, -mkernel]";
			},
			{
				Name = "GCC_TREAT_WARNINGS_AS_ERRORS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Werror",
					);
					NO = ();
				};
				Category = WarningsPolicy;
			},
			{
				Name = "GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Werror-implicit-function-declaration",
					);
					NO = ();
				};
				FileTypes = (
					"sourcecode.c.c",
					"sourcecode.c.objc",
				);
				Category = Warnings;
				AppearsAfter = "GCC_TREAT_WARNINGS_AS_ERRORS";
			},
			{
				Name = "GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Werror=incompatible-pointer-types",
					);
					NO = ();
				};
				Category = Warnings;
				AppearsAfter = "GCC_TREAT_WARNINGS_AS_ERRORS";
			},
			{
				Name = "GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wmissing-field-initializers",
					);
					NO = (
						"-Wno-missing-field-initializers",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_ABOUT_MISSING_PROTOTYPES";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wmissing-prototypes",
					);
					NO = (
						"-Wno-missing-prototypes",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_ABOUT_RETURN_TYPE";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wreturn-type",
					);
					NO = (
						"-Wno-return-type",
					);
				};
				Category = Warnings;
			},
			{
				Name = "CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wimplicit-atomic-properties"
					);
					NO = (
					   "-Wno-implicit-atomic-properties"
					);
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
				Category = WarningsObjC;
			},
			{
			   Name = "CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS";
			   Type = Boolean;
			   DefaultValue = NO;
			   CommandLineArgs = {
				   YES = ( "-Wobjc-missing-property-synthesis" );
				   NO = ();
			   };
			   FileTypes = (
				   "sourcecode.c.objc",
				   "sourcecode.cpp.objcpp",
			   );
			   Category = WarningsObjC;
			},
			{
			   Name = "CLANG_WARN_OBJC_RECEIVER_WEAK";
			   Type = Boolean;
			   DefaultValue = NO;
			   CommandLineArgs = {
				  YES = ( "-Wreceiver-is-weak" );
				  NO  = ( "-Wno-receiver-is-weak" );
			   };
			   FileTypes = (
				   "sourcecode.c.objc",
				   "sourcecode.cpp.objcpp",
			   );
			   Category = WarningsObjC;
			},
			{
				Name = "GCC_WARN_NON_VIRTUAL_DESTRUCTOR";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wnon-virtual-dtor",
					);
					NO = (
						"-Wno-non-virtual-dtor",
					);
				};
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				Category = WarningsCXX;
			},
			{
				Name = "GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Woverloaded-virtual",
					);
					NO = (
						"-Wno-overloaded-virtual",
					);
				};
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				Category = WarningsCXX;
			},
			{
				/* The "__" is intentional. */
				Name = "CLANG_WARN__EXIT_TIME_DESTRUCTORS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
				  YES = ("-Wexit-time-destructors");
				  NO  = ("-Wno-exit-time-destructors");
				};
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				Category = WarningsCXX;
			},
			{
				/* The "__" is intentional. */
				Name = "CLANG_WARN__ARC_BRIDGE_CAST_NONARC";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
				  YES = ();
				  NO  = ("-Wno-arc-bridge-casts-disallowed-in-nonarc");
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
				Category = WarningsObjC;
			},
			{
				/* The "__" is intentional. */
				Name = "CLANG_WARN__DUPLICATE_METHOD_MATCH";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
				  YES = ("-Wduplicate-method-match");
				  NO  = ();
				};
				FileTypes = (
				  "sourcecode.c.objc",
				  "sourcecode.cpp.objcpp",
				);
				Category = WarningsObjC;
			},
			{
				Name = "GCC_WARN_TYPECHECK_CALLS_TO_PRINTF";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = (
						"-Wformat",
					);
					NO = (
						"-Wno-format",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wmissing-braces",
					);
					NO = (
						"-Wno-missing-braces",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_MISSING_PARENTHESES";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = (
						"-Wparentheses",
					);
					NO = (
						"-Wno-parentheses",
					);
				};
				Category = Warnings;
			},
			{
				Name = "CLANG_WARN_DOCUMENTATION";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wdocumentation",
					);
					NO = (
						"-Wno-documentation",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_CHECK_SWITCH_STATEMENTS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = (
						"-Wswitch",
					);
					NO = (
						"-Wno-switch",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_UNUSED_FUNCTION";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wunused-function",
					);
					NO = (
						"-Wno-unused-function",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_UNUSED_LABEL";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wunused-label",
					);
					NO = (
						"-Wno-unused-label",
					);
				};
				Category = Warnings;
			},
			{
				Name = "CLANG_WARN_EMPTY_BODY";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = ( "-Wempty-body" );
					NO = ( "-Wno-empty-body" );
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_UNINITIALIZED_AUTOS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wuninitialized",
					);
					NO = (
						"-Wno-uninitialized",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_UNKNOWN_PRAGMAS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wunknown-pragmas",
					);
					NO = (
						"-Wno-unknown-pragmas",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_INHIBIT_ALL_WARNINGS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-w",
					);
					NO = ();
				};
				Category = WarningsPolicy;
			},
			{
				Name = "GCC_WARN_PEDANTIC";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-pedantic",
					);
					NO = ();
				};
				Category = WarningsPolicy;
			},
			{
				Name = "GCC_WARN_SHADOW";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wshadow",
					);
					NO = (
						"-Wno-shadow",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_FOUR_CHARACTER_CONSTANTS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wfour-char-constants",
					);
					NO = (
						"-Wno-four-char-constants",
					);
				};
				Category = Warnings;
			},
			/* This needs to appear in the xcspec before GCC_WARN_64_TO_32_BIT_CONVERSION.
			   This is because -Wno-conversion would turn that warning off.	 By having
			   GCC_WARN_64_TO_32_BIT_CONVERSION appear later, it generates a
			   compiler flag later in the command line, and the compiler
			   honors the last flag last.  We need explicit -Wno-XXX for
			   each warning to have it work with -Weverything. */
			{
				Name = "CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
				  YES = (
					"-Wconversion",
				  );
				  NO = (
					/* This cannot be removed until we have a solution
					   for <rdar://problem/11067768> */
				   "-Wno-conversion",
				  );
				};
				CommonOption = NO;
				Category = Warnings;
			},
			/* This must appear after CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION */
			{
				Name = "CLANG_WARN_CONSTANT_CONVERSION";
				Type = Boolean;
				DefaultValue = "$(CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION)";
				CommandLineArgs = {
				  YES = ( "-Wconstant-conversion" );
				  NO  = ( "-Wno-constant-conversion" );
				};
				Category = Warnings;
			},
			/* This must appear after CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION */
			{
				Name = "CLANG_WARN_INT_CONVERSION";
				Type = Boolean;
				DefaultValue = "$(CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION)";
				CommandLineArgs = {
				  YES = (
					"-Wint-conversion"
				  );
				  NO  = (
					"-Wno-int-conversion"
				  );
				};
				Category = Warnings;
			},
			/* This must appear after CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION */
			{
				Name = "CLANG_WARN_ENUM_CONVERSION";
				Type = Boolean;
				DefaultValue = "$(CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION)";
				CommandLineArgs = {
				  YES = (
					"-Wenum-conversion"
				  );
				  NO  = (
					"-Wno-enum-conversion"
				  );
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_SIGN_COMPARE";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wsign-compare",
					);
					NO = ();
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wselector",
					);
					NO = (
						"-Wno-selector",
					);
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
				Category = WarningsObjC;
			},
			{
				Name = "GCC_WARN_STRICT_SELECTOR_MATCH";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wstrict-selector-match",
					);
					NO = (
						"-Wno-strict-selector-match",
					);
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
				Category = WarningsObjC;
			},
			{
				Name = "GCC_WARN_UNDECLARED_SELECTOR";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wundeclared-selector",
					);
					NO = (
						"-Wno-undeclared-selector",
					);
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
				Category = WarningsObjC;
			},
			{
				Name = "CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wdeprecated-implementations",
					);
					NO = (
						"-Wno-deprecated-implementations",
					);
				};
				FileTypes = (
				  "sourcecode.c.objc",
				  "sourcecode.cpp.objcpp",
				);
				Category = WarningsObjC;
			},
			{
				Name = "CLANG_WARN_CXX0X_EXTENSIONS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = ( "-Wc++11-extensions" );
					/* We need to explicitly pass -Wno, since parts of this
					   warning are on by default. */
					NO = ( "-Wno-c++11-extensions" ) ;
				};
				FileTypes = (
				  "sourcecode.cpp.cpp",
				  "sourcecode.cpp.objcpp",
				);
				Category = WarningsCXX;
			},
			{
				Name = "WARNING_CFLAGS";
				Type = StringList;
				DefaultValue = "";
				Category = Warnings;
			},
			{
				Name = "GCC_PREPROCESSOR_DEFINITIONS";
				Type = StringList;
				DefaultValue = "";
				CommandLineArgs = (
					"-D$(value)",
				);
				Category = Preprocessing;
			},
			{
				Name = "GCC_PRODUCT_TYPE_PREPROCESSOR_DEFINITIONS";
				Type = StringList;
				DefaultValue = "";
				CommandLineArgs = (
					"-D$(value)",
				);
			},
			{
				Name = "GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS";
				Type = StringList;
				DefaultValue = "";
				Category = Preprocessing;
			},
			{
				Name = "USE_HEADERMAP";
				Type = Boolean;
				DefaultValue = YES;
			},
			{
				Name = "HEADERMAP_FILE_FORMAT";
				Type = Enumeration;
				AllowedValues = (
					traditional,
				);
				DefaultValue = traditional;
			},
			{
				Name = "CPP_HEADERMAP_FILE";
				Type = Path;
				DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME).hmap";
			},
			{
				Name = "CPP_HEADERMAP_FILE_FOR_GENERATED_FILES";
				Type = Path;
				DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME)-generated-files.hmap";
			},
			{
				Name = "CPP_HEADERMAP_FILE_FOR_OWN_TARGET_HEADERS";
				Type = Path;
				DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME)-own-target-headers.hmap";
			},
			{
				Name = "CPP_HEADERMAP_FILE_FOR_ALL_TARGET_HEADERS";
				Type = Path;
				DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME)-all-target-headers.hmap";
			},
			{
				Name = "CPP_HEADERMAP_FILE_FOR_PROJECT_FILES";
				Type = Path;
				DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME)-project-headers.hmap";
			},
			{
				Name = "USE_HEADER_SYMLINKS";
				Type = Boolean;
				DefaultValue = NO;
			},
			{
				Name = "CPP_HEADER_SYMLINKS_DIR";
				Type = Path;
				DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME).hdrs";
			},
			{
				Name = SDKROOT;
				Type = Path;
				CommandLineFlag = "-isysroot";
			},
			{
				Name = "GCC_USE_GCC3_PFE_SUPPORT";
				Type = Boolean;
				DefaultValue = YES;
			},
			{
				Name = "GCC_PFE_FILE_C_DIALECTS";
				Type = StringList;
				DefaultValue = "c objective-c c++ objective-c++";
			},
			{
				Name = "ENABLE_APPLE_KEXT_CODE_GENERATION";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-fapple-kext",
					);
					NO = ();
				};
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
			},
			{
				Name = "GCC_WARN_UNUSED_PARAMETER";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wunused-parameter",
					);
					NO = (
						"-Wno-unused-parameter",
					);
				};
				AppearsAfter = "GCC_WARN_UNUSED_LABEL";
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_UNUSED_VARIABLE";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wunused-variable",
					);
					NO = (
						"-Wno-unused-variable",
					);
				};
				AppearsAfter = "GCC_WARN_UNUSED_PARAMETER";
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_UNUSED_VALUE";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = (
						"-Wunused-value",
					);
					NO = (
					   "-Wno-unused-value",
					);
				};
				AppearsAfter = "GCC_WARN_UNUSED_VARIABLE";
				Category = Warnings;
			},
			{
				Name = "GCC_ENABLE_EXCEPTIONS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineFlag = "-fexceptions";
			},
			{
				Name = "GCC_ENABLE_OBJC_EXCEPTIONS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-fno-objc-exceptions",
					);
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
				Category = Language;
			},
			{
				Name = "GCC_CW_ASM_SYNTAX";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = (
						"-fasm-blocks",
					);
					NO = ();
				};
				Architectures = (i386, x86_64);
				Category = Language;
			},
			{
				Name = "GCC_FAST_OBJC_DISPATCH";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-fno-objc-direct-dispatch",
					);
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
				Category = CodeGeneration;
			},
			{
				Name = "GCC_UNROLL_LOOPS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-funroll-loops",
					);
					NO = ();
				};
				Category = CodeGeneration;
			},
			{
				Name = "GCC_FAST_MATH";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-ffast-math",
					);
					NO = ();
				};
				Category = CodeGeneration;
			},
			{
				Name = "GCC_STRICT_ALIASING";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ( "-fstrict-aliasing" );
					NO	= ( "-fno-strict-aliasing" );
				};
				Category = CodeGeneration;
			},
			{
				Name = "GCC_INSTRUMENT_PROGRAM_FLOW_ARCS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-fprofile-arcs",
					);
					NO = ();
				};
				AdditionalLinkerArgs = {
				  YES = (
					  "-fprofile-arcs",
				  );
				  NO = ();
				};
				Category = CodeGeneration;
			},
			{
				Name = "GCC_GENERATE_TEST_COVERAGE_FILES";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-ftest-coverage",
					);
					NO = ();
				};
				AdditionalLinkerArgs = {
				  YES = (
					  "-ftest-coverage",
				  );
				  NO = ();
				};
				Category = CodeGeneration;
			},
			{
				Name = "GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = (
						"-Wprotocol",
					);
					NO = (
						"-Wno-protocol",
					);
				};
				FileTypes = (
					"sourcecode.c.objc",
					"sourcecode.cpp.objcpp",
				);
				Category = WarningsObjC;
			},
			{
				Name = "GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = (
						"-Wdeprecated-declarations",
					);
					NO = (
						"-Wno-deprecated-declarations",
					);
				};
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO";
				Type = Boolean;
				DefaultValue = YES;
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				CommandLineArgs = {
					YES = (
						"-Winvalid-offsetof",
					);
					NO = (
						"-Wno-invalid-offsetof",
					);
				};
				Category = WarningsCXX;
			},
			{
				Name = "GCC_MACOSX_VERSION_MIN";
				Type = String;
				DefaultValue = "$(MACOSX_DEPLOYMENT_TARGET)";
				CommandLineArgs = {
					"" = ();
					"<<otherwise>>" = (
						"-mmacosx-version-min=$(value)",
					);
				};
			},
			{
				Name = "GCC_DEBUG_INFORMATION_FORMAT";
				Type = Enumeration;
				AllowedValues = (
					dwarf,
					"dwarf-with-dsym",
				);
				CommandLineArgs = {
					dwarf = (
						"-g",
					);
					"dwarf-with-dsym" = (
						"-g",
					);
					"<<otherwise>>" = ();
				};
				DefaultValue = "$(DEBUG_INFORMATION_FORMAT)";
				Condition = "$(GCC_GENERATE_DEBUGGING_SYMBOLS)";
				CommonOption = NO;
			},
			{
				/* Old build setting.  Kept around for old project compatibility.  Forwards to CLANG_X86_VECTOR_INSTRUCTIONS. */
				Name = "GCC_ENABLE_SSE3_EXTENSIONS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = { YES = (); NO = (); };
				Architectures = ( i386, "x86_64", );
			},
			{
				/* Old build setting.  Kept around for old project compatibility.  Forwards to CLANG_X86_VECTOR_INSTRUCTIONS. */
				Name = "GCC_ENABLE_SUPPLEMENTAL_SSE3_INSTRUCTIONS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = { YES = (); NO = (); };
				Architectures = ( i386, "x86_64", );
			},
			{
				/* Old build setting.  Kept around for old project compatibility.  Forwards to CLANG_X86_VECTOR_INSTRUCTIONS. */
				Name = "GCC_ENABLE_SSE41_EXTENSIONS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = { YES = (); NO = (); };
				Architectures = ( i386, "x86_64", );
			},
			{
				/* Old build setting.  Kept around for old project compatibility.  Forwards to CLANG_X86_VECTOR_INSTRUCTIONS. */
				Name = "GCC_ENABLE_SSE42_EXTENSIONS";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = { YES = (); NO = (); };
				Architectures = ( i386, "x86_64", );
			},
			{
				Name = DEFAULT_SSE_LEVEL_3_YES;
				Type = String;				  
				DefaultValue = "sse3";
			},
			{
				Name = DEFAULT_SSE_LEVEL_3_NO;
				Type = String;
				DefaultValue = "default";
			},
			{
				Name = DEFAULT_SSE_LEVEL_3_SUPPLEMENTAL_YES;
				Type = String;
				DefaultValue = "ssse3";
			},
			{
				Name = DEFAULT_SSE_LEVEL_3_SUPPLEMENTAL_NO;
				Type = String;
				DefaultValue = "$(DEFAULT_SSE_LEVEL_3_$(GCC_ENABLE_SSE3_EXTENSIONS))";
			},
			{
				/* Forwards old build settings to CLANG_X86_VECTOR_INSTRUCTIONS. */
				Name = DEFAULT_SSE_LEVEL_4_1_YES;
				Type = String;
				DefaultValue = "sse4.1";
			},
			{
				/* Forwards old build settings to CLANG_X86_VECTOR_INSTRUCTIONS. */
				Name = DEFAULT_SSE_LEVEL_4_1_NO;
				Type = String;
				DefaultValue = "$(DEFAULT_SSE_LEVEL_3_SUPPLEMENTAL_$(GCC_ENABLE_SUPPLEMENTAL_SSE3_INSTRUCTIONS))";
			},
			{
				/* Forwards old build settings to CLANG_X86_VECTOR_INSTRUCTIONS. */
				Name = DEFAULT_SSE_LEVEL_4_2_YES;
				Type = String;
				DefaultValue = "sse4.2";
			},
			{
				/* Forwards old build settings to CLANG_X86_VECTOR_INSTRUCTIONS. */
				Name = DEFAULT_SSE_LEVEL_4_2_NO;
				Type = String;
				DefaultValue = "$(DEFAULT_SSE_LEVEL_4_1_$(GCC_ENABLE_SSE41_EXTENSIONS))";
			},
			{
				Name = "CLANG_X86_VECTOR_INSTRUCTIONS";
				Type = Enumeration;
				AllowedValues = (default, "sse3", "ssse3", "sse4.1", "sse4.2", "avx" );
				DisplayName = "Enable Additional Vector Extensions";
				DefaultValue = "$(DEFAULT_SSE_LEVEL_4_2_$(GCC_ENABLE_SSE42_EXTENSIONS))";
				CommandLineArgs = {
					default = ();
					"<<otherwise>>" = ( "-m$(value)" );
				};
				Architectures = (
					i386,
					"x86_64",
				);
				Category = CodeGeneration;
				Description = "Enables the use of extended vector instructions.	 Only used when targeting Intel architectures. [CLANG_X86_VECTOR_INSTRUCTIONS]";
			},
			{
				Name = "GCC_SYMBOLS_PRIVATE_EXTERN";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-fvisibility=hidden",
					);
					NO = ();
				};
				AppearsAfter = "GCC_FEEDBACK_DIRECTED_OPTIMIZATION";
				Category = CodeGeneration;
				DisplayName = "Symbols Hidden by Default";
				Description = "When enabled, all symbols are declared 'private extern' unless explicitly marked to be exported using '__attribute__((visibility(\"default\")))' in code. If not enabled, all symbols are exported unless explicitly marked as 'private extern'.\n			 For more information, see <file:///Developer/ADC%20Reference%20Library/documentation/DeveloperTools/Conceptual/CppRuntimeEnv/Articles/SymbolVisibility.html>. [GCC_SYMBOLS_PRIVATE_EXTERN, -fvisibility=hidden]";
			},
			{
				Name = "GCC_INLINES_ARE_PRIVATE_EXTERN";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-fvisibility-inlines-hidden",
					);
					NO = ();
				};
				AppearsAfter = "GCC_SYMBOLS_PRIVATE_EXTERN";
				Category = CodeGeneration;
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				DisplayName = "Inline Methods Hidden";
				Description = "When enabled, out-of-line copies of inline methods are declared 'private extern'. [GCC_INLINES_ARE_PRIVATE_EXTERN, -fvisibility-inlines-hidden]";
			},
			{
				Name = "GCC_THREADSAFE_STATICS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-fno-threadsafe-statics",
					);
				};
				AppearsAfter = "GCC_INLINES_ARE_PRIVATE_EXTERN";
				Category = CodeGeneration;
				FileTypes = (
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				DisplayName = "Statics are Thread-Safe";
				Description = "Emits extra code to use the routines specified in the C++ ABI for thread-safe initialization of local statics. You can disable this option to reduce code size slightly in code that doesn't need to be thread-safe.	 [GCC_THREADSAFE_STATICS, -fno-threadsafe-statics]";
			},
			{
				Name = "GCC_WARN_ABOUT_POINTER_SIGNEDNESS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = (
						"-Wpointer-sign",
					);
					NO = (
						"-Wno-pointer-sign",
					);
				};
				FileTypes = (
					"sourcecode.c.c",
					"sourcecode.c.objc",
				);
				AppearsAfter = "GCC_WARN_SIGN_COMPARE";
				Category = Warnings;
				CommonOption = YES;
				DisplayName = "Pointer Sign Comparison";
				Description = "Warn when pointers passed via arguments or assigned to a variable differ in sign.  [GCC_WARN_ABOUT_POINTER_SIGNEDNESS, -Wno-pointer-sign]";
			},
			{
				Name = "GCC_WARN_ABOUT_MISSING_NEWLINE";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wnewline-eof",
					);
					NO = (
						"-Wno-newline-eof",
					);
				};
				AppearsAfter = "GCC_WARN_ABOUT_POINTER_SIGNEDNESS";
				Category = Warnings;
				CommonOption = NO;
				DisplayName = "Missing Newline At End Of File";
				Description = "Warn when a source file does not end with a newline.	 [GCC_WARN_ABOUT_MISSING_NEWLINE, -Wnewline-eof]";
			},
			/*	NOTE: This must appear *after* CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION
				as -Wsign-conversion is a subgroup of -Wconversion, and users
				expect to be able to activate one build setting and disable the other
				and get the expected result. */
			{
				Name = "CLANG_WARN_IMPLICIT_SIGN_CONVERSION";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
				  YES = ( 
					"-Wsign-conversion",
				  );
				  NO = ( 
					"-Wno-sign-conversion",
				  );
				};
				CommonOption = NO;
				Category = Warnings;
			},
			{
				Name = "GCC_WARN_64_TO_32_BIT_CONVERSION";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Wshorten-64-to-32",
					);
					NO = (
						"-Wno-shorten-64-to-32"
					);
				};
				AppearsAfter = "GCC_WARN_SIGN_COMPARE";
				Category = Warnings;
				CommonOption = NO;
				DisplayName = "Implicit Conversion to 32 Bit Type";
				Description = "Warn if a value is implicitly converted from a 64 bit type to a 32 bit type.	 [GCC_WARN_64_TO_32_BIT_CONVERSION, -Wshorten-64-to-32]";
			},
			{
				Name = "GCC_OBJC_ABI_VERSION";
				Type = Enumeration;
				AllowedValues = (
					1,
					2,
				);
				DefaultValue = "$(OBJC_ABI_VERSION)";
				CommandLineArgs = {
					"" = ();
					"<<otherwise>>" = (
						"-fobjc-abi-version=$(value)"
					);
				};
				FileTypes = (
					sourcecode.c.objc,
					sourcecode.cpp.objcpp,
				);
				// Category is hidden -- used by iPhoneSimulator to match runtime OS setup;
			},
			{
				Name = "GCC_OBJC_LEGACY_DISPATCH";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-fobjc-legacy-dispatch",
					);
					NO = ();
				};
				FileTypes = (
					sourcecode.c.objc,
					sourcecode.cpp.objcpp,
				);
				// Category is hidden -- used by iPhoneSimulator to match runtime OS setup;
			},
			// These 4 settings are used by Xcode's migration tool.
			// They should not be removed.
			// They do not show up in the user visible build settings.
			{
				Name = "CLANG_ARC_MIGRATE_PRECHECK";
				Type = Enumeration;
				AllowedValues = (
					donothing,
					precheck,
				);
				DefaultValue = donothing;
				CommandLineArgs = {
					donothing = ();
					precheck = (
						"-ccc-arcmt-check",
					);
				};
			},
			{
				Name = "CLANG_ARC_MIGRATE_DIR";
				Type = Path;
				CommandLineFlag = "-ccc-arcmt-migrate";
				// Category is hidden.
			},
			{
				 Name = "CLANG_OBJC_MIGRATE_DIR";
				 Type = Path;
				 CommandLineFlag = "-ccc-objcmt-migrate";
			},
			{
				Name = "CLANG_ARC_MIGRATE_EMIT_ERROR";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-arcmt-migrate-emit-errors",
					);
					NO = ();
				};
				// Category is hidden.
			},
			{
				Name = "CLANG_ARC_MIGRATE_REPORT_OUTPUT";
				Type = Path;
				CommandLineFlag = "-arcmt-migrate-report-output";
				// Category is hidden.
			},
		);
	},
	
	{
		Identifier = "com.apple.compilers.llvm.clang.nightly.compiler";
		Type = Compiler;
		BasedOn = "com.apple.compilers.llvm.clang.nightly";
		Name = "Clang Nightly";
		Description = "Clang Nightly Build";
		IsAbstract = YES;
		ShowInCompilerSelectionPopup = NO;
		Architectures = (
			i386,
			"x86_64",
			armv6,
			armv7,
		);
		"OptionConditionFlavors" = (
			arch,
			sdk,
		);
		FallbackTools = (
			"com.apple.compilers.llvmgcc42",
		);
		ExecCPlusPlusLinkerPath = "$(CLANG)++";
		SupportsGeneratePreprocessedFile = YES;
		SupportsGenerateAssemblyFile = YES;
		CommandResultsPostprocessor = "XCClangResultsPostprocessor";
		SupportsSerializedDiagnostics = YES;
	},
	
	{
		Identifier = "com.apple.compilers.llvm.clang.nightly.analyzer";
		Type = Compiler;
		BasedOn = "com.apple.compilers.llvm.clang.nightly";
		Name = "Static Analyzer";
		Description = "Clang Static Analyzer Nightly Build";
		Architectures = (
			i386,
			"x86_64",
			armv6,
			armv7,
		);
		// This is a workaround so that the analyzer ALWAYS uses the clang in the default toolchain.
		ExecPath = "$(CLANG_ANALYZER_EXEC)";
		RuleName = "Analyze $(InputFile)";
		OutputDir = "$(CLANG_ANALYZER_OUTPUT_DIR)/StaticAnalyzer/$(PROJECT_NAME)/$(TARGET_NAME)/$(CURRENT_VARIANT)/$(CURRENT_ARCH)";
		OutputFileExtension = plist;
		OutputsAreProducts = YES;
		IsAbstract = YES;
		ShowInCompilerSelectionPopup = NO;
		ShowOnlySelfDefinedProperties = YES;
		SoftError = YES;
		CommandOutputParser = (
			("^([^:]*):([0-9]*):[0-9]*: [^:]*error: (.*)$", "emit-analyzer-warning"),
			("^([^:]*):() [^:]*error: (.*)$", "emit-analyzer-warning"),
			("^()()error: (.*)$", "emit-analyzer-warning"),
		);
		CommandResultsPostprocessor = "XCStaticAnalyzerResultsPostprocessor";
		SourceFileOption = "--analyze";
		FileTypes = (
			"sourcecode.c.c",
			"sourcecode.c.objc",
			"sourcecode.cpp.cpp",
			"sourcecode.cpp.objcpp",
		);
		OverridingProperties = {
		  "OTHER_PRECOMP_CFLAGS" = "$(inherited) -D__clang_analyzer__";
		};
		Options = (
			{
				Name = CLANG_ANALYZER_EXEC;
				Type = Path;
				DefaultValue = "$(DEVELOPER_DIR)/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang";
			},
			{
				Name = CLANG_ANALYZER_OUTPUT_DIR;
				Type = Path;
				DefaultValue = "$(TEMP_DIR)";
			},
			{
				Name = "CLANG_ANALYZER_OUTPUT";
				Type = Enumeration;
				AllowedValues = (
				  default,
				  "plist-multi-file",
				);
				DefaultValue = "plist-multi-file";
				CommandLineArgs = {
				  default = ();
				  "<<otherwise>>" = ( "-Xclang", "-analyzer-output=$(value)", );
				};
				// Category is hidden.
			},
			{
				Name = "CLANG_ANALYZER_DEADCODE_DEADSTORES";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-Xclang", "-analyzer-disable-checker",
						"-Xclang", "deadcode.DeadStores"
					);
				};
				Category = SACheckers;
			},
			{
				Name = "CLANG_ANALYZER_OBJC_COLLECTIONS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-Xclang", "-analyzer-disable-checker",
						"-Xclang", "osx.coreFoundation.containers.PointerSizedValues",
						"-Xclang", "-analyzer-disable-checker",
						"-Xclang", "osx.cocoa.VariadicMethodTypes"
					);
				};
				Category = SAObjCCheckers;
			},
			{
				Name = "CLANG_ANALYZER_OBJC_NSCFERROR";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-Xclang", "-analyzer-disable-checker",
						"-Xclang", "osx.coreFoundation.CFError",
						"-Xclang", "-analyzer-disable-checker",
						"-Xclang", "osx.cocoa.NSError"
					);
				};
				Category = SAObjCCheckers;
			},
			{
				Name = "CLANG_ANALYZER_OBJC_CFNUMBER";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-Xclang", "-analyzer-disable-checker",
						"-Xclang", "osx.coreFoundation.CFNumber"
					);
				};
				Category = SAObjCCheckers;
			},
			{
				Name = "CLANG_ANALYZER_OBJC_INCOMP_METHOD_TYPES";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-Xclang", "-analyzer-disable-checker",
						"-Xclang", "osx.cocoa.IncompatibleMethodTypes"
					);
				};
				Category = SAObjCCheckers;
			},
			{
				Name = "CLANG_ANALYZER_OBJC_UNUSED_IVARS";
				Type = Boolean;
				DefaultValue = YES;
				CommandLineArgs = {
					YES = ();
					NO = (
						"-Xclang", "-analyzer-disable-checker",
						"-Xclang", "osx.cocoa.UnusedIvars"
					);
				};
				Category = SAObjCCheckers;
			},
			{
				 Name = "CLANG_ANALYZER_MALLOC";
				 Type = Boolean;
				 DefaultValue = YES;
				 CommandLineArgs = {
					 YES = ();
					 NO = (
						 "-Xclang", "-analyzer-disable-checker",
						 "-Xclang", "unix.Malloc",
						 "-Xclang", "-analyzer-disable-checker",
						 "-Xclang", "unix.MallocSizeof"
					 );
				 };
				 Category = SACheckers;
			},
			{
				 Name = "CLANG_ANALYZER_OBJC_RETAIN_COUNT";
				 Type = Boolean;
				 DefaultValue = YES;
				 CommandLineArgs = {
				   YES = ();
				   NO = (
					   "-Xclang", "-analyzer-disable-checker",
					   "-Xclang", "osx.cocoa.RetainCount",
					   "-Xclang", "-analyzer-disable-checker",
					   "-Xclang", "osx.cocoa.ClassRelease"
				   );
			   };
			   Category = SAObjCCheckers;
			},
			{
				 Name = "CLANG_ANALYZER_OBJC_ATSYNC";
				 Type = Boolean;
				 DefaultValue = YES;
				 CommandLineArgs = {
					 YES = ();
					 NO = (
						 "-Xclang", "-analyzer-disable-checker",
						 "-Xclang", "osx.cocoa.AtSync"
					 );
				 };
				 Category = SAObjCCheckers;
			},
			{
				 Name = "CLANG_ANALYZER_GCD";
				 Type = Boolean;
				 DefaultValue = YES;
				 CommandLineArgs = {
					 YES = ();
					 NO = (
						 "-Xclang", "-analyzer-disable-checker",
						 "-Xclang", "osx.API"
					 );
				 };
				 Category = SACheckers;
			},
			{
			   Name = "CLANG_ANALYZER_OBJC_SELF_INIT";
			   Type = Boolean;
			   DefaultValue = YES;
			   CommandLineArgs = {
				  YES = ();
				  NO = ( "-Xclang", "-analyzer-disable-checker",
						 "-Xclang", "osx.cocoa.SelfInit" );
			   };
			   FileTypes = (
				  "sourcecode.c.objc",
				  "sourcecode.cpp.objcpp",
			   );
			   Category = SAObjCCheckers;
			 },
			{
			   Name = "CLANG_ANALYZER_SECURITY_KEYCHAIN_API";
			   Type = Boolean;
			   DefaultValue = YES;
			   CommandLineArgs = {
				  YES = ();
				  NO = ( "-Xclang", "-analyzer-disable-checker",
						 "-Xclang", "osx.SecKeychainAPI" );
			   };
			   FileTypes = (
				  "sourcecode.c.objc",
				  "sourcecode.cpp.objcpp",
			   );
			   Category = SASecurityCheckers;
			},
			{
			   Name = "CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER";
			   Type = Boolean;
			   DefaultValue = NO;
			   CommandLineArgs = {
				  YES = ( "-Xclang", "-analyzer-checker",
						  "-Xclang", "security.FloatLoopCounter" );
				  NO = ();
			   };
			   Category = SASecurityCheckers;
			},
			{
			   Name = "CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN";
			   Type = Boolean;
			   DefaultValue = YES;
			   CommandLineArgs = {
				  YES = ( "-Xclang", "-analyzer-checker",
						  "-Xclang", "security.insecureAPI.UncheckedReturn" );
				  NO = (  "-Xclang", "-analyzer-disable-checker",
						  "-Xclang", "security.insecureAPI.UncheckedReturn" );
			   };
			   Category = SASecurityCheckers;
			},
			{
			   Name = "CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS";
			   Type = Boolean;
			   DefaultValue = YES;
			   CommandLineArgs = {
				  YES = ( "-Xclang", "-analyzer-checker",
						  "-Xclang", "security.insecureAPI.getpw",
						  "-Xclang", "-analyzer-checker",
						  "-Xclang", "security.insecureAPI.gets" );
				  NO = (  "-Xclang", "-analyzer-disable-checker",
						  "-Xclang", "security.insecureAPI.getpw",
						  "-Xclang", "-analyzer-disable-checker",
						  "-Xclang", "security.insecureAPI.gets" );
			   };
			   Category = SASecurityCheckers;
			},
			{
			   Name = "CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP";
			   Type = Boolean;
			   DefaultValue = YES;
			   CommandLineArgs = {
				  YES = ( "-Xclang", "-analyzer-checker",
						  "-Xclang", "security.insecureAPI.mkstemp",
						  "-Xclang", "-analyzer-checker",
						  "-Xclang", "security.insecureAPI.mktemp" );
				  NO =	( "-Xclang", "-analyzer-disable-checker",
						  "-Xclang", "security.insecureAPI.mkstemp",
						  "-Xclang", "-analyzer-disable-checker",
						  "-Xclang", "security.insecureAPI.mktemp" );
			   };
			   Category = SASecurityCheckers;
			},
			{
			   Name = "CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND";
			   Type = Boolean;
			   DefaultValue = NO;
			   CommandLineArgs = {
				  YES = ( "-Xclang", "-analyzer-checker",
						  "-Xclang", "security.insecureAPI.rand" );
				  NO =	( "-Xclang", "-analyzer-disable-checker",
						  "-Xclang", "security.insecureAPI.rand" );
			   };
			   Category = SASecurityCheckers;
			},
			{
			   Name = "CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY";
			   Type = Boolean;
			   DefaultValue = NO;
			   CommandLineArgs = {
				  YES = ( "-Xclang", "-analyzer-checker",
						  "-Xclang", "security.insecureAPI.strcpy" );
				  NO =	( "-Xclang", "-analyzer-disable-checker",
						  "-Xclang", "security.insecureAPI.strcpy" );
			   };
			   Category = SASecurityCheckers;
			},
			{
			   Name = "CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK";
			   Type = Boolean;
			   DefaultValue = YES;
			   CommandLineArgs = {
				  YES = ( "-Xclang", "-analyzer-checker",
						  "-Xclang", "security.insecureAPI.vfork" );
				  NO =	( "-Xclang", "-analyzer-disable-checker",
						  "-Xclang", "security.insecureAPI.vfork" );
			   };
			   Category = SASecurityCheckers;
			},
			{
				Name = "CLANG_ANALYZER_SECURITY_BUFFER_OVERFLOW_EXPERIMENTAL";
				Type = Boolean;
				DefaultValue = NO;
				CommandLineArgs = {
					YES = (
						"-Xclang", "-analyzer-checker",
						"-Xclang", "core.experimental.Overflow",
						"-Xclang", "-analyzer-checker",
						"-Xclang", "security.experimental.ArrayBoundV2",
						"-Xclang", "-analyzer-max-loop",
						"-Xclang", "100"
					);
					NO = ();
				};
				// Category is hidden.
			},
			// This is intentionally the second to last option so that the build
			// system places its arguments last on the command line.
			{
				Name = "CLANG_ANALYZER_OTHER_CHECKERS";
				Type = StringList;
				FileTypes = (
					"sourcecode.c.c",
					"sourcecode.c.objc",
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				CommandLineArgs = (
					"-Xclang", "-analyzer-checker", "-Xclang", "$(value)",
				);
			},			  
			// This is intentionally the last option so that the build
			// system places its arguments last on the command line.
			{
				Name = "CLANG_ANALYZER_OTHER_FLAGS";
				Type = StringList;
				FileTypes = (
					"sourcecode.c.c",
					"sourcecode.c.objc",
					"sourcecode.cpp.cpp",
					"sourcecode.cpp.objcpp",
				);
				CommandLineArgs = (
					"-Xclang", "$(value)",
				);
			},
		);
	},

	{
			   Identifier = "com.apple.compilers.llvm.clang.nightly.migrator";
			   Type = Compiler;
			   BasedOn = "com.apple.compilers.llvm.clang.nightly";
			   Name = "ObjC Migrator";
			   Description = "Apple Clang ObjC Migrator";
			   Architectures = (
					   i386,
					   "x86_64",
					   armv6,
					   armv7,
			   );
			   ExecPath = "$(CLANG)";
			   OutputDir = "$(TEMP_DIR)/Migrator";
			   OutputFileExtension = remap;
			   OutputsAreProducts = YES;
			   IsAbstract = YES;
			   CommandResultsPostprocessor = "XCClangResultsPostprocessor";
			   SupportsSerializedDiagnostics = YES;
			   "ShowInCompilerSelectionPopup" = NO;
			   "ShowOnlySelfDefinedProperties" = YES;
			   SourceFileOption = "--migrate";
			   FileTypes = (
					   "sourcecode.c.objc",
					   "sourcecode.cpp.objcpp",
			  );
			   Options = (
					   {
							   Name = CLANG;
							   Type = Path;
							   DefaultValue = clang;
					   },
			   );
	  },

	{
		Identifier = "com.apple.compilers.llvm.clang.nightly.astbuilder";
		Type = Compiler;
		BasedOn = "com.apple.compilers.llvm.clang.nightly";
		Name = "AST Builder";
		Description = "Apple Clang AST Builder 1.0";
		FileTypes = (
			"sourcecode.c.c",
			"sourcecode.c.objc",
			"sourcecode.cpp.cpp",
			"sourcecode.cpp.objcpp",
		);
		SourceFileOption = "-fsyntax-only";
		OverridingProperties = {  
			"ENABLE_HEADER_DEPENDENCIES" = YES;
			"SHARED_PRECOMPS_DIR" = "$(INDEX_PRECOMPS_DIR)";
			"CLEAN_PRECOMPS" = NO;
		};
		RuleName = "Build AST from $(InputFile)";
		OutputFileExtension = ast;
		IsAbstract = YES;
		ShowInCompilerSelectionPopup = NO;
		PrunePrecompiledHeaderCache = NO;
	},
)
