//
// Apple LLVM 5.0
// Xcode Compiler Specification
// English localization
//
// Copyright (c) 2009-2013 Apple Inc.  All rights reserved.
//

// Localized strings for basic info

"Name" = "Apple LLVM 5.0";
"Description" = "Apple LLVM 5.0 Compiler";
"Version" = "5.0";
"Vendor" = "Apple";

// Localized strings for compiler options

"[Preprocessing]-category" = "Preprocessing";

"[GCC_PREPROCESSOR_DEFINITIONS]-name" = "Preprocessor Macros";
"[GCC_PREPROCESSOR_DEFINITIONS]-description" = "Space-separated list of preprocessor macros of the form \"foo\" or \"foo=bar\". [GCC_PREPROCESSOR_DEFINITIONS, -D]";

"[GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS]-name" = "Preprocessor Macros Not Used In Precompiled Headers";
"[GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS]-description" = "Space-separated list of preprocessor macros of the form \"foo\" or \"foo=bar\". These macros are not used when precompiling a prefix header file. [GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS, -D]";

"[ENABLE_NS_ASSERTIONS]-name" = "Enable Foundation Assertions";
"[ENABLE_NS_ASSERTIONS]-description" = "Controls whether assertion logic provided by NSAssert is included in the preprocessed source code our is elided during preprocessing.  Disabling assertions can improve code performance.  [ENABLE_NS_ASSERTIONS]";
"[ENABLE_NS_ASSERTIONS]-value-[NO]" = "No";
"[ENABLE_NS_ASSERTIONS]-value-[YES]" = "Yes";

"[Language]-category" = "Language";
"[LanguageObjC]-category" = "Language - Objective C";
"[LanguageCXX]-category" = "Language - C++";
"[LanguageModules]-category" = "Language - Modules";

"[GCC_INPUT_FILETYPE]-name" = "Compile Sources As";
"[GCC_INPUT_FILETYPE]-description" = "Specifies whether to compile each source file according to its file type, or whether to treat all source files in the target as if they are of a specific language. [GCC_INPUT_FILETYPE]";
"[GCC_INPUT_FILETYPE]-value-[automatic]" = "According to File Type";
"[GCC_INPUT_FILETYPE]-value-[sourcecode.c.c]" = "C";
"[GCC_INPUT_FILETYPE]-value-[sourcecode.c.objc]" = "Objective-C";
"[GCC_INPUT_FILETYPE]-value-[sourcecode.cpp.cpp]" = "C++";
"[GCC_INPUT_FILETYPE]-value-[sourcecode.cpp.objcpp]" = "Objective-C++";

"[GCC_USE_STANDARD_INCLUDE_SEARCHING]-name" = "Use Standard System Header Directory Searching";
"[GCC_USE_STANDARD_INCLUDE_SEARCHING]-description" = "Controls whether the standard system directories are searched for header files. When disabled, only the directories you have specified with -I options (and the directory of the current file, if appropriate) are searched.  [GCC_USE_STANDARD_INCLUDE_SEARCHING, -nostdinc]";
"[GCC_USE_STANDARD_INCLUDE_SEARCHING]-value-[NO]" = "No";
"[GCC_USE_STANDARD_INCLUDE_SEARCHING]-value-[YES]" = "Yes";

"[GCC_C_LANGUAGE_STANDARD]-name" = "C Language Dialect";
"[GCC_C_LANGUAGE_STANDARD]-description" = "Choose a standard or non-standard C language dialect.

ANSI C: Accept ISO C90 and ISO C++, turning off GNU extensions that are incompatible. [-ansi]

Incompatible GNU extensions include the 'asm', 'inline', and 'typeof' keywords (but not the equivalent __asm__, __inline__, and __typeof__ forms), and the '//' syntax for comments.

This setting also enables trigraphs.

C89: Accept ISO C90 (1990), but not GNU extensions. [-std=c89]

GNU89: Accept ISO C90 and GNU extensions. [-std=gnu89]

C99: Accept ISO C99 (1999), but not GNU extensions. [-std=c99]

GNU99: Accept ISO C99 and GNU extensions. [-std=gnu99]

C11: Accept ISO C11 (2011), but not GNU extensions. [-std=c11]

GNU11: Accept ISO C11 and GNU extensions. [-std=gnu11]

Compiler Default: Tells the compiler to use its default C language dialect. This is normally the best choice unless you have specific needs. (Currently equivalent to GNU99.)

Please see the full GCC manual for the full definition of all these settings on the C dialect:
<http://developer.apple.com/documentation/DeveloperTools/gcc-4.2.1/gcc/C-Dialect-Options.html>

[GCC_C_LANGUAGE_STANDARD]
";
"[GCC_C_LANGUAGE_STANDARD]-value-[ansi]" = "ANSI C [-ansi]";
"[GCC_C_LANGUAGE_STANDARD]-description-[ansi]" = "Accept ISO C90 and ISO C++, turning off GNU extensions that are incompatible.  [-ansi]";
"[GCC_C_LANGUAGE_STANDARD]-value-[c89]" = "C89 [-std=c89]";
"[GCC_C_LANGUAGE_STANDARD]-description-[c89]" = "Accept ISO C90, but not GNU extensions.  [-std=c89]";
"[GCC_C_LANGUAGE_STANDARD]-value-[gnu89]" = "GNU89 [-std=gnu89]";
"[GCC_C_LANGUAGE_STANDARD]-description-[gnu89]" = "Accept ISO C90 and GNU extensions.  [-std=gnu89]";
"[GCC_C_LANGUAGE_STANDARD]-value-[c99]" = "C99 [-std=c99]";
"[GCC_C_LANGUAGE_STANDARD]-description-[c99]" = "Accept ISO C99, but not GNU extensions.  [-std=c99]";
"[GCC_C_LANGUAGE_STANDARD]-value-[gnu99]" = "GNU99 [-std=gnu99]";
"[GCC_C_LANGUAGE_STANDARD]-description-[gnu99]" = "Accept ISO C99 and GNU extensions.  [-std=gnu99]";
"[GCC_C_LANGUAGE_STANDARD]-value-[compiler-default]" = "Compiler Default";
"[GCC_C_LANGUAGE_STANDARD]-description-[compiler-default]" = "Tells the compiler to use its default C language dialect. This is normally the best choice unless you have specific needs. (Currently equivalent to GNU99.)";

"[CLANG_CXX_LANGUAGE_STANDARD]-name" = "C++ Language Dialect";
"[CLANG_CXX_LANGUAGE_STANDARD]-description" = "Choose a standard or non-standard C++ language dialect.

C++98: Accept ISO C++ 1998 with amendments, but not GNU extensions. [-std=c++98]

GNU++98: Accept ISO C++ 1998 with amendments and GNU extensions. [-std=gnu++98]

C++11: Accept the ISO C++ 2011 standard with amendments, but not GNU extensions. [-std=c++11]

GNU++11: Accept the ISO C++ 2011 standard with amendments and GNU extensions. [-std=gnu++11]

Compiler Default: Tells the compiler to use its default C++ language dialect. This is normally the best choice unless you have specific needs. (Currently equivalent to GNU++98.)

[CLANG_CXX_LANGUAGE_STANDARD]
";

"[CLANG_CXX_LANGUAGE_STANDARD]-value-[c++98]" = "C++98 [-std=c++98]";
"[CLANG_CXX_LANGUAGE_STANDARD]-description-[c++98]" = "Accept ISO C++ 1998 with amendments, but not GNU extensions. [-std=c++98]";
"[CLANG_CXX_LANGUAGE_STANDARD]-value-[gnu++98]" = "GNU++98 [-std=gnu++98]";
"[CLANG_CXX_LANGUAGE_STANDARD]-description-[gnu++98]" = "Accept ISO C++ 1998 with amendments and GNU extensions. [-std=gnu++98]";
/* Note that the value must remain c++0x, for backwards compatibility. */
"[CLANG_CXX_LANGUAGE_STANDARD]-value-[c++0x]" = "C++11 [-std=c++11]";
/* Note that the value must remain c++0x, for backwards compatibility. */
"[CLANG_CXX_LANGUAGE_STANDARD]-description-[c++0x]" = "Accept the ISO C++ 2011 standard with amendments, but not GNU extensions. [-std=c++11]";
/* Note that the value must remain gnu++0x, for backwards compatibility. */
"[CLANG_CXX_LANGUAGE_STANDARD]-value-[gnu++0x]" = "GNU++11 [-std=gnu++11]";
/* Note that the value must remain gnu++0x, for backwards compatibility. */
"[CLANG_CXX_LANGUAGE_STANDARD]-description-[gnu++0x]" = "Accept the ISO C++ 2011 standard with amendments and GNU extensions. [-std=gnu++11]";
"[CLANG_CXX_LANGUAGE_STANDARD]-value-[compiler-default]" = "Compiler Default";
"[CLANG_CXX_LANGUAGE_STANDARD]-description-[compiler-default]" = "Tells the compiler to use its default C++ language dialect. This is normally the best choice unless you have specific needs. (Currently equivalent to GNUC++98.)";

"[CLANG_CXX_LIBRARY]-name" = "C++ Standard Library";
"[CLANG_CXX_LIBRARY]-description" = "Choose a version of the C++ standard library to use.

libstdc++: traditional C++ standard library that works with GCC and the LLVM Compiler (default).
libc++: highly optimized C++ standard library that works only with the LLVM Compiler, and is designed to support new C++11 features.

[CLANG_CXX_LIBRARY]
";
"[CLANG_CXX_LIBRARY]-value-[compiler-default]" = "Compiler Default";
"[CLANG_CXX_LIBRARY]-description-[compiler-default]" = "Tells the compiler to use its default C++ standard library.  (Currently equivalent to libstdc++)";

"[CLANG_CXX_LIBRARY]-value-[libstdc++]" = "libstdc++ (GNU C++ standard library)";
"[CLANG_CXX_LIBRARY]-description-[libstdc++]" = "C++ standard library that works with GCC and the LLVM Compiler.";
"[CLANG_CXX_LIBRARY]-value-[libc++]" = "libc++ (LLVM C++ standard library with C++11 support)";
"[CLANG_CXX_LIBRARY]-description-[libc++]" = "New optimized C++ standard library that works only with the LLVM Compiler.";

"[GCC_CHAR_IS_UNSIGNED_CHAR]-name" = "'char' Type Is Unsigned";
"[GCC_CHAR_IS_UNSIGNED_CHAR]-description" = "Enabling this setting causes 'char' to be unsigned by default, disabling it causes 'char' to be signed by default.  [GCC_CHAR_IS_UNSIGNED_CHAR, -funsigned-char]";
"[GCC_CHAR_IS_UNSIGNED_CHAR]-value-[NO]" = "No";
"[GCC_CHAR_IS_UNSIGNED_CHAR]-value-[YES]" = "Yes";

"[GCC_ENABLE_ASM_KEYWORD]-name" = "Allow 'asm', 'inline', 'typeof'";
"[GCC_ENABLE_ASM_KEYWORD]-description" = "Controls whether 'asm', 'inline', and 'typeof' are treated as keywords or whether they can be used as identifiers.  [GCC_ENABLE_ASM_KEYWORD, -fno-asm]";
"[GCC_ENABLE_ASM_KEYWORD]-value-[NO]" = "No";
"[GCC_ENABLE_ASM_KEYWORD]-value-[YES]" = "Yes";

"[GCC_ENABLE_TRIGRAPHS]-name" = "Enable Trigraphs";
"[GCC_ENABLE_TRIGRAPHS]-description" = "Controls whether or not trigraphs are permitted in the source code.  [GCC_ENABLE_TRIGRAPHS, -trigraphs]";
"[GCC_ENABLE_TRIGRAPHS]-value-[NO]" = "No";
"[GCC_ENABLE_TRIGRAPHS]-value-[YES]" = "Yes";

"[GCC_ENABLE_CPP_EXCEPTIONS]-name" = "Enable C++ Exceptions";
"[GCC_ENABLE_CPP_EXCEPTIONS]-description" = "Enable C++ exception handling.  Generates extra code needed to propagate exceptions.  For some targets, this implies GCC will generate frame unwind information for all functions, which can produce significant data size overhead, although it does not affect execution.  If you do not specify this option, GCC will enable it by default for languages like C++ which normally require exception handling, and disable it for languages like C that do not normally require it.  However, you may need to enable this option when compiling C code that needs to interoperate properly with exception handlers written in C++.  [GCC_ENABLE_CPP_EXCEPTIONS, -fno-exceptions]";
"[GCC_ENABLE_CPP_EXCEPTIONS]-value-[NO]" = "No";
"[GCC_ENABLE_CPP_EXCEPTIONS]-value-[YES]" = "Yes";

"[GCC_ENABLE_CPP_RTTI]-name" = "Enable C++ Runtime Types";
"[GCC_ENABLE_CPP_RTTI]-description" = "Enable generation of information about every class with virtual functions for use by the C++ runtime type identification features ( dynamic_cast and typeid ).  If you don't use those parts of the language, you can save some space by using this flag.  Note that exception handling uses the same information, but it will generate it as needed.  [GCC_ENABLE_CPP_RTTI, -fno-rtti]";
"[GCC_ENABLE_CPP_RTTI]-value-[NO]" = "No";
"[GCC_ENABLE_CPP_RTTI]-value-[YES]" = "Yes";

"[GCC_ENABLE_PASCAL_STRINGS]-name" = "Recognize Pascal Strings";
"[GCC_ENABLE_PASCAL_STRINGS]-description" = "Recognize and construct Pascal-style string literals. Its use in new code is discouraged.

	Pascal string literals take the form \"\\pstring\" .  The special escape sequence \\p denotes the Pascal length byte for the string, and will be replaced at compile time with the number of characters that follow.  The \p may only appear at the beginning of a string literal, and may not appear in wide string literals or as an integral constant.  [GCC_ENABLE_PASCAL_STRINGS, -fpascal-strings]";
"[GCC_ENABLE_PASCAL_STRINGS]-value-[NO]" = "No";
"[GCC_ENABLE_PASCAL_STRINGS]-value-[YES]" = "Yes";

"[GCC_SHORT_ENUMS]-name" = "Short Enumeration Constants";
"[GCC_SHORT_ENUMS]-description" = "Make enums only as large as needed for the range of possible values. [GCC_SHORT_ENUMS, -fshort-enums]

Warning: this setting generates code that may not binary compatible with code generated without this setting or with OS X frameworks.";
"[GCC_SHORT_ENUMS]-value-[NO]" = "No";
"[GCC_SHORT_ENUMS]-value-[YES]" = "Yes";

"[GCC_ENABLE_BUILTIN_FUNCTIONS]-name" = "Recognize Built-in Functions";
"[GCC_ENABLE_BUILTIN_FUNCTIONS]-description" = "Controls whether built-in functions that do not begin with __builtin_ as prefix are recognized.

GCC normally generates special code to handle certain built-in functions more efficiently; for instance, calls to \"alloca\" may become single instructions that adjust the stack directly, and calls to \"memcpy\" may become inline copy loops.  The resulting code is often both smaller and faster, but since the function calls no longer appear as such, you cannot set a breakpoint on those calls, nor can you change the behavior of the functions by linking with a different library.  In addition, when a function is recognized as a built-in function, GCC may use information about that function to warn about problems with calls to that function, or to generate more efficient code, even if the resulting code still contains calls to that function.  For example, warnings are given with -Wformat for bad calls to \"printf\", when \"printf\" is built in, and \"strlen\" is known not to modify global memory.

[GCC_ENABLE_BUILTIN_FUNCTIONS, -fno-builtin]";
"[GCC_ENABLE_BUILTIN_FUNCTIONS]-value-[NO]" = "No";
"[GCC_ENABLE_BUILTIN_FUNCTIONS]-value-[YES]" = "Yes";

"[GCC_LINK_WITH_DYNAMIC_LIBRARIES]-name" = "Enable Linking With Shared Libraries";
"[GCC_LINK_WITH_DYNAMIC_LIBRARIES]-description" = "Enabling this option allows linking with the shared libraries.  This is the default for most product types.  [GCC_LINK_WITH_DYNAMIC_LIBRARIES, -static]";
"[GCC_LINK_WITH_DYNAMIC_LIBRARIES]-value-[NO]" = "No";
"[GCC_LINK_WITH_DYNAMIC_LIBRARIES]-value-[YES]" = "Yes";

"[GCC_ENABLE_FLOATING_POINT_LIBRARY_CALLS]-name" = "Generate Floating Point Library Calls";
"[GCC_ENABLE_FLOATING_POINT_LIBRARY_CALLS]-description" = "Generate output containing library calls for floating point.  [GCC_ENABLE_FLOATING_POINT_LIBRARY_CALLS, -msoft-float]";
"[GCC_ENABLE_FLOATING_POINT_LIBRARY_CALLS]-value-[NO]" = "No";
"[GCC_ENABLE_FLOATING_POINT_LIBRARY_CALLS]-value-[YES]" = "Yes";

"[GCC_PREFIX_HEADER]-name" = "Prefix Header";
"[GCC_PREFIX_HEADER]-description" = "Implicitly include the named header. The path given should either be a project relative path or an absolute path. [GCC_PREFIX_HEADER]";
"[GCC_PREFIX_HEADER]-value-[NO]" = "No";
"[GCC_PREFIX_HEADER]-value-[YES]" = "Yes";

"[GCC_PRECOMPILE_PREFIX_HEADER]-name" = "Precompile Prefix Header";
"[GCC_PRECOMPILE_PREFIX_HEADER]-description" = "Generates a precompiled header for the prefix header, which should reduce overall build times. [GCC_PRECOMPILE_PREFIX_HEADER]

Note: Precompiling the prefix header will be most effective if the contents of the prefix header or any file it includes change rarely. If the contents of the prefix header or any file it includes change frequently, there may be a negative impact to overall build time.";
"[GCC_PRECOMPILE_PREFIX_HEADER]-value-[NO]" = "No";
"[GCC_PRECOMPILE_PREFIX_HEADER]-value-[YES]" = "Yes";

"[GCC_INCREASE_PRECOMPILED_HEADER_SHARING]-name" = "Increase Sharing of Precompiled Headers";
"[GCC_INCREASE_PRECOMPILED_HEADER_SHARING]-description" = "Enabling this option will enable increased sharing of precompiled headers among targets which share the same prefix header and precompiled header directory.

Xcode distinguishes among precompiled header files by generating a hash value based on the command-line options to the compiler used to create the PCH.  Enabling this option will exclude certain compiler options from that hash.  Presently this option will exclude search path options (-I, -iquote, -isystem, -F, -L) from the hash.

Enabling increased sharing of PCH files carries some risk: If two targets use the same prefix header but have different include paths which cause the prefix header to include different files when they are precompiled, then subtle problems may result because one target will use a PCH which was built using files included by the other target.  In this case, this option must be turned off in order to enforce correctness.

[GCC_INCREASE_PRECOMPILED_HEADER_SHARING]";
"[GCC_INCREASE_PRECOMPILED_HEADER_SHARING]-value-[NO]" = "No";
"[GCC_INCREASE_PRECOMPILED_HEADER_SHARING]-value-[YES]" = "Yes";

"[OTHER_CFLAGS]-name" = "Other C Flags";
"[OTHER_CFLAGS]-description" = "Space-separated list of additional flags to pass to the compiler for C and Objective-C files.  Be sure to backslash-escape any arguments that contain spaces or special characters (e.g. path names that may contain spaces).  Use this setting if Xcode does not already provide UI for a particular C or Objective-C compiler flag. [OTHER_CFLAGS]";

"[OTHER_CPLUSPLUSFLAGS]-name" = "Other C++ Flags";
"[OTHER_CPLUSPLUSFLAGS]-description" = "Space-separated list of additional flags to pass to the compiler for C++ and Objective-C++ files.  Be sure to backslash-escape any arguments that contain spaces or special characters (e.g. path names that may contain spaces).  Use this setting if Xcode does not already provide UI for a C++ or Objective-C++ compiler flag. [OTHER_CPLUSPLUSFLAGS]";

"[CustomFlags]-category" = "Custom Compiler Flags";
"[Warnings]-category" = "Warnings - All languages";
"[WarningsPolicy]-category" = "Warning Policies";
"[WarningsObjC]-category" = "Warnings - Objective C";
"[WarningsObjCARC]-category" = "Warnings - Objective C and ARC";
"[WarningsCXX]-category" = "Warnings - C++";

"[GCC_TREAT_WARNINGS_AS_ERRORS]-name" = "Treat Warnings as Errors";
"[GCC_TREAT_WARNINGS_AS_ERRORS]-description" = "Enabling this option causes all warnings to be treated as errors.  [GCC_TREAT_WARNINGS_AS_ERRORS, -Werror]";
"[GCC_TREAT_WARNINGS_AS_ERRORS]-value-[NO]" = "No";
"[GCC_TREAT_WARNINGS_AS_ERRORS]-value-[YES]" = "Yes";

"[GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS]-name" = "Treat Missing Function Prototypes as Errors";
"[GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS]-description" = "Causes warnings about missing function prototypes to be treated as errors.  Only applies to C and Objective-C.  [GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS, -Werror-implicit-function-declaration]";
"[GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS]-value-[NO]" = "No";
"[GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS]-value-[YES]" = "Yes";

"[GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS]-name" = "Treat Incompatible Pointer Type Warnings as Errors";
"[GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS]-description" = "Enabling this option causes warnings about incompatible pointer types to be treated as errors.  [GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS, -Werror=incompatible-pointer-types]";
"[GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS]-value-[NO]" = "No";
"[GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS]-value-[YES]" = "Yes";

"[GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS]-name" = "Missing Fields in Structure Initializers";
"[GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS]-description" = "Warn if a structure's initializer has some fields missing.  For example, the following code would cause such a warning, because \"x.h\" is implicitly zero:

    struct s { int f, g, h; };
    struct s x = { 3, 4 };

This option does not warn about designated initializers, so the following modification would not trigger a warning:

    struct s { int f, g, h; };
    struct s x = { .f = 3, .g = 4 };

[GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS, -Wmissing-field-initializers]";
"[GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS]-value-[NO]" = "No";
"[GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS]-value-[YES]" = "Yes";

"[GCC_WARN_ABOUT_MISSING_PROTOTYPES]-name" = "Missing Function Prototypes";
"[GCC_WARN_ABOUT_MISSING_PROTOTYPES]-description" = "Causes warnings to be emitted about missing prototypes.  [GCC_WARN_ABOUT_MISSING_PROTOTYPES, -Wmissing-prototypes]";
"[GCC_WARN_ABOUT_MISSING_PROTOTYPES]-value-[NO]" = "No";
"[GCC_WARN_ABOUT_MISSING_PROTOTYPES]-value-[YES]" = "Yes";

"[GCC_WARN_ABOUT_RETURN_TYPE]-name" = "Mismatched Return Type";
"[GCC_WARN_ABOUT_RETURN_TYPE]-description" = "Causes warnings to be emitted when a function with a defined return type (not void) contains a return statement without a return-value.  Also emits a warning when a function is defined without specifying a return type.  [GCC_WARN_ABOUT_RETURN_TYPE, -Wreturn-type]";
"[GCC_WARN_ABOUT_RETURN_TYPE]-value-[NO]" = "No";
"[GCC_WARN_ABOUT_RETURN_TYPE]-value-[YES]" = "Yes";
"[GCC_WARN_ABOUT_RETURN_TYPE]-value-[YES_ERROR]" = "Yes (treat as error)";

"[CLANG_WARN_DIRECT_OBJC_ISA_USAGE]-name" = "Direct usage of 'isa'";
"[CLANG_WARN_DIRECT_OBJC_ISA_USAGE]-description" = "Warn about direct accesses to the Objective-C 'isa' pointer instead of using a runtime API. [CLANG_WARN_DIRECT_OBJC_ISA_USAGE, -Wdeprecated-objc-isa-usage]";
"[CLANG_WARN_DIRECT_OBJC_ISA_USAGE]-value-[NO]" = "No";
"[CLANG_WARN_DIRECT_OBJC_ISA_USAGE]-value-[YES]" = "Yes";
"[CLANG_WARN_DIRECT_OBJC_ISA_USAGE]-value-[YES_ERROR]" = "Yes (treat as error)";

"[CLANG_WARN_DOCUMENTATION_COMMENTS]-name" = "Documentation Comments";
"[CLANG_WARN_DOCUMENTATION_COMMENTS]-description" = "Warns about issues in documentation comments (doxygen-style) such as missing or incorrect documentation tags.  [CLANG_WARN_DOCUMENTATION_COMMENTS, -Wdocumentation]";
"[CLANG_WARN_DOCUMENTATION_COMMENTS]-value-[NO]" = "No";
"[CLANG_WARN_DOCUMENTATION_COMMENTS]-value-[YES]" = "Yes";

"[CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES]-name" = "Implicit Atomic Objective-C Properties";
"[CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES]-description" = "Warn about @property declarations that are implicitly atomic.";
"[CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES]-value-[NO]" = "No";
"[CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES]-value-[YES]" = "Yes";

"[CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS]-name" = "Implicit Synthesized Properties";
"[CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS]-description" = "Starting in Xcode 4.4, the Apple LLVM Compiler will implicitly synthesize properties that are not
explicitly synthesized using @synthesize.  This warning warns about such implicit behavior, even though the property is still synthesized.  This is essentially a backwards compatability warning, or for those who wish to continue to explicitly use @synthesize.";
"[CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS]-value-[NO]" = "No";
"[CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS]-value-[YES]" = "Yes";

"[CLANG_WARN_OBJC_ROOT_CLASS]-name" = "Unintentional Root Class";
"[CLANG_WARN_OBJC_ROOT_CLASS]-description" = "Warn about classes that unintentionally do not subclass a root class (such as NSObject).  [CLANG_WARN_OBJC_ROOT_CLASS, -Wobjc-root-class]";
"[CLANG_WARN_OBJC_ROOT_CLASS]-value-[NO]" = "No";
"[CLANG_WARN_OBJC_ROOT_CLASS]-value-[YES]" = "Yes";
"[CLANG_WARN_OBJC_ROOT_CLASS]-value-[YES_ERROR]" = "Yes (treat as error)";

"[CLANG_WARN_OBJC_RECEIVER_WEAK]-name" = "Sending messages to __weak pointers";
"[CLANG_WARN_OBJC_RECEIVER_WEAK]-description" = "Warn about sending messages to Objective-C pointers that are __weak.  This aids in avoiding situations (e.g., race conditions) when the last strong reference goes away and a client
is messaging a __weak pointer that can suddenly (and unexpectedly) become nil.  [CLANG_WARN_OBJC_RECEIVER_WEAK, -Wreceiver-is-weak]";
"[CLANG_WARN_OBJC_RECEIVER_WEAK]-value-[NO]" = "No";
"[CLANG_WARN_OBJC_RECEIVER_WEAK]-value-[YES]" = "Yes";

"[CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK]-name" = "Repeatedly using a __weak reference";
"[CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK]-description" = "Warn about repeatedly using a weak reference without assigning the weak reference to a strong reference.  This is often symptomatic of a race condition where the weak reference can become nil between accesses, resulting in unexpected behavior.  Assigning to temporary strong reference ensures the object stays alive during the
related accesses.  [CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK, -Warc-repeated-use-of-weak]";
"[CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK]-value-[NO]" = "No";
"[CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK]-value-[YES]" = "Yes";

"[CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE]-name" = "Implicit ownership types on out parameters";
"[CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE]-description" = "Warn about implicit ownership types on Objective-C object references as out parameters.  For example, declaring a parameter with type 'NSObject**' will produce a warning because the compiler will assume that the out parameter's ownership type is '__autoreleasing'.  CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE, -Wexplicit-ownership-type]";
"[CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE]-value-[NO]" = "No";
"[CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE]-value-[YES]" = "Yes";

"[CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF]-name" = "Implicit retain of 'self' within blocks";
"[CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF]-description" = "Warn about implicit retains of 'self' within blocks, which can create a retain-cycle.  CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF, -Wimplicit-retain-self]";
"[CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF]-value-[NO]" = "No";
"[CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF]-value-[YES]" = "Yes";

"[GCC_WARN_NON_VIRTUAL_DESTRUCTOR]-name" = "Nonvirtual Destructor";
"[GCC_WARN_NON_VIRTUAL_DESTRUCTOR]-description" = "Warn when a class declares an nonvirtual destructor that should probably be virtual, because it looks like the class will be used polymorphically.  [GCC_WARN_NON_VIRTUAL_DESTRUCTOR, -Wnon-virtual-dtor]

This is only active for C++ or Objective-C++ sources.";
"[GCC_WARN_NON_VIRTUAL_DESTRUCTOR]-value-[NO]" = "No";
"[GCC_WARN_NON_VIRTUAL_DESTRUCTOR]-value-[YES]" = "Yes";

"[GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS]-name" = "Overloaded Virtual Functions";
"[GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS]-description" = "Warn when a function declaration hides virtual functions from a base class. [GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS, -Woverloaded-virtual]

For example, in:

	struct A {
	  virtual void f();
	};

	struct B: public A {
	  void f(int);
	};

the A class version of f() is hidden in B, and code like this:

	B* b;
	b->f();

will fail to compile. This setting only applies to C++ and Objective-C++ sources.";
"[GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS]-value-[NO]" = "No";
"[GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS]-value-[YES]" = "Yes";

"[CLANG_WARN__EXIT_TIME_DESTRUCTORS]-name" = "Exit-Time C++ Destructors";
"[CLANG_WARN__EXIT_TIME_DESTRUCTORS]-description" = "Warn about destructors for C++ objects that are called when an application is terminating.";
"[CLANG_WARN__EXIT_TIME_DESTRUCTORS]-value-[NO]" = "No";
"[CLANG_WARN__EXIT_TIME_DESTRUCTORS]-value-[YES]" = "Yes";

"[CLANG_WARN__ARC_BRIDGE_CAST_NONARC]-name" = "Using __bridge Casts Outside of ARC";
"[CLANG_WARN__ARC_BRIDGE_CAST_NONARC]-description" = "Warn about using __bridge casts when not using ARC (where they have no effect).";
"[CLANG_WARN__ARC_BRIDGE_CAST_NONARC]-value-[NO]" = "No";
"[CLANG_WARN__ARC_BRIDGE_CAST_NONARC]-value-[YES]" = "Yes";

"[CLANG_WARN__DUPLICATE_METHOD_MATCH]-name" = "Duplicate Method Definitions";
"[CLANG_WARN__DUPLICATE_METHOD_MATCH]-description" = "Warn about declaring the same method more than once within the same @interface.";
"[CLANG_WARN__DUPLICATE_METHOD_MATCH]-value-[NO]" = "No";
"[CLANG_WARN__DUPLICATE_METHOD_MATCH]-value-[YES]" = "Yes";

"[GCC_WARN_TYPECHECK_CALLS_TO_PRINTF]-name" = "Typecheck Calls to printf/scanf";
"[GCC_WARN_TYPECHECK_CALLS_TO_PRINTF]-description" = "Check calls to printf and scanf, etc., to make sure that the arguments supplied have types appropriate to the format string specified, and that the conversions specified in the format string make sense.  [GCC_WARN_TYPECHECK_CALLS_TO_PRINTF, -Wno-format]";
"[GCC_WARN_TYPECHECK_CALLS_TO_PRINTF]-value-[NO]" = "No";
"[GCC_WARN_TYPECHECK_CALLS_TO_PRINTF]-value-[YES]" = "Yes";

"[GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED]-name" = "Initializer Not Fully Bracketed";
"[GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED]-description" = "Warn if an aggregate or union initializer is not fully bracketed.

	Example, Here initializer for a is not fully bracketed, but that for b is fully bracketed.

	int a[2][2] = { 0, 1, 2, 3 };
	int b[2][2] = { { 0, 1 }, { 2, 3 } };

[GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED, -Wmissing-braces]";
"[GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED]-value-[NO]" = "No";
"[GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED]-value-[YES]" = "Yes";

"[GCC_WARN_MISSING_PARENTHESES]-name" = "Missing Braces and Parentheses";
"[GCC_WARN_MISSING_PARENTHESES]-description" = "Warn if parentheses are omitted in certain contexts, such as when there is an assignment in a context where a truth value is expected, or when operators are nested whose precedence people often get confused about.

Also warn about constructions where there may be confusion to which if statement an else branch belongs.  Here is an example of such a case:
{
  if (a)
    if (b)
      foo ();
  else
    bar ();
}

	In C, every else branch belongs to the innermost possible if statement, which in this example is if (b) .  This is often not what the programmer expected, as illustrated in the above example by indentation the programmer chose.  When there is the potential for this confusion, GCC will issue a warning when this flag is specified.  To eliminate the warning, add explicit braces around the innermost if statement so there is no way the else could belong to the enclosing if .  The resulting code would look like this:
{
  if (a)
    {
      if (b)
        foo ();
      else
        bar ();
    }
}

[GCC_WARN_MISSING_PARENTHESES, -Wparentheses]";
"[GCC_WARN_MISSING_PARENTHESES]-value-[NO]" = "No";
"[GCC_WARN_MISSING_PARENTHESES]-value-[YES]" = "Yes";

"[GCC_WARN_CHECK_SWITCH_STATEMENTS]-name" = "Check Switch Statements";
"[GCC_WARN_CHECK_SWITCH_STATEMENTS]-description" = "Warn whenever a switch statement has an index of enumeral type and lacks a case for one or more of the named codes of that enumeration.  The presence of a default label prevents this warning.  Case labels outside the enumeration range also provoke warnings when this option is used.  [GCC_WARN_CHECK_SWITCH_STATEMENTS, -Wswitch]";
"[GCC_WARN_CHECK_SWITCH_STATEMENTS]-value-[NO]" = "No";
"[GCC_WARN_CHECK_SWITCH_STATEMENTS]-value-[YES]" = "Yes";

"[GCC_WARN_UNUSED_FUNCTION]-name" = "Unused Functions";
"[GCC_WARN_UNUSED_FUNCTION]-description" = "Warn whenever a static function is declared but not defined or a non-inline static function is unused.  [GCC_WARN_UNUSED_FUNCTION, -Wunused-function]";
"[GCC_WARN_UNUSED_FUNCTION]-value-[NO]" = "No";
"[GCC_WARN_UNUSED_FUNCTION]-value-[YES]" = "Yes";

"[GCC_WARN_UNUSED_LABEL]-name" = "Unused Labels";
"[GCC_WARN_UNUSED_LABEL]-description" = "Warn whenever a label is declared but not used.  [GCC_WARN_UNUSED_LABEL, -Wunused-label]";
"[GCC_WARN_UNUSED_LABEL]-value-[NO]" = "No";
"[GCC_WARN_UNUSED_LABEL]-value-[YES]" = "Yes";

"[CLANG_WARN_EMPTY_BODY]-name" = "Empty Loop Bodies";
"[CLANG_WARN_EMPTY_BODY]-description" = "Warn about loop bodies that are suspiciously empty.   [CLANG_WARN_EMPTY_BODY, -Wempty-body]";
"[CLANG_WARN_EMPTY_BODY]-value-[NO]" = "No";
"[CLANG_WARN_EMPTY_BODY]-value-[YES]" = "Yes";

"[GCC_WARN_UNINITIALIZED_AUTOS]-name" = "Uninitialized Variables";
"[GCC_WARN_UNINITIALIZED_AUTOS]-description" = "Warn if a variable might be clobbered by a setjmp call or if an automatic variable is used without prior initialization.

    Note that the compiler may not detect all cases where an automatic variable is initialized or all usage patterns that may lead to use prior to initialization.  You can toggle between the normal uninitialized value checking or the more aggressive (conservative) checking which finds more issues but the checking is much stricter. [GCC_WARN_UNINITIALIZED_AUTOS, -Wuninitialized,-Wconditional-uninitialized]";
"[GCC_WARN_UNINITIALIZED_AUTOS]-value-[NO]" = "No";
"[GCC_WARN_UNINITIALIZED_AUTOS]-value-[YES]" = "Yes";
"[GCC_WARN_UNINITIALIZED_AUTOS]-value-[YES_AGGRESSIVE]" = "Yes (Aggressive)";

"[GCC_WARN_UNKNOWN_PRAGMAS]-name" = "Unknown Pragma";
"[GCC_WARN_UNKNOWN_PRAGMAS]-description" = "Warn when a #pragma directive is encountered which is not understood by GCC.  If this command line option is used, warnings will even be issued for unknown pragmas in system header files.  This is not the case if the warnings were only enabled by the -Wall command line option.  [GCC_WARN_UNKNOWN_PRAGMAS, -Wunknown-pragmas]";
"[GCC_WARN_UNKNOWN_PRAGMAS]-value-[NO]" = "No";
"[GCC_WARN_UNKNOWN_PRAGMAS]-value-[YES]" = "Yes";

"[GCC_WARN_INHIBIT_ALL_WARNINGS]-name" = "Inhibit All Warnings";
"[GCC_WARN_INHIBIT_ALL_WARNINGS]-description" = "Inhibit all warning messages.  [-GCC_WARN_INHIBIT_ALL_WARNINGS, -w]";
"[GCC_WARN_INHIBIT_ALL_WARNINGS]-value-[NO]" = "No";
"[GCC_WARN_INHIBIT_ALL_WARNINGS]-value-[YES]" = "Yes";

"[GCC_WARN_PEDANTIC]-name" = "Pedantic Warnings";
"[GCC_WARN_PEDANTIC]-description" = "Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions, and some other programs that do not follow ISO C and ISO C++.  For ISO C, follows the version of the ISO C standard specified by any -std option used.  [GCC_WARN_PEDANTIC, -pedantic]";
"[GCC_WARN_PEDANTIC]-value-[NO]" = "No";
"[GCC_WARN_PEDANTIC]-value-[YES]" = "Yes";

"[GCC_WARN_SHADOW]-name" = "Hidden Local Variables";
"[GCC_WARN_SHADOW]-description" = "Warn whenever a local variable shadows another local variable, parameter or global variable or whenever a built-in function is shadowed.  [GCC_WARN_SHADOW, -Wshadow]";
"[GCC_WARN_SHADOW]-value-[NO]" = "No";
"[GCC_WARN_SHADOW]-value-[YES]" = "Yes";

"[GCC_WARN_FOUR_CHARACTER_CONSTANTS]-name" = "Four Character Literals";
"[GCC_WARN_FOUR_CHARACTER_CONSTANTS]-description" = "Warn about four-char literals (e.g., MacOS-style OSTypes: 'APPL').  [GCC_WARN_FOUR_CHARACTER_CONSTANTS, -Wfour-char-constants]";
"[GCC_WARN_FOUR_CHARACTER_CONSTANTS]-value-[NO]" = "No";
"[GCC_WARN_FOUR_CHARACTER_CONSTANTS]-value-[YES]" = "Yes";

"[GCC_WARN_SIGN_COMPARE]-name" = "Sign Comparison";
"[GCC_WARN_SIGN_COMPARE]-description" = "Warn when a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned.  [GCC_WARN_SIGN_COMPARE, -Wsign-compare]";
"[GCC_WARN_SIGN_COMPARE]-value-[NO]" = "No";
"[GCC_WARN_SIGN_COMPARE]-value-[YES]" = "Yes";

"[GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR]-name" = "Multiple Definition Types for Selector";
"[GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR]-description" = "Warn if multiple methods of different types for the same selector are found during compilation.  The check is performed on the list of methods in the final stage of compilation.  Additionally, a check is performed for each selector appearing in a \"@selector(...)\"  expression, and a corresponding method for that selector has been found during compilation.  Because these checks scan the method table only at the end of compilation, these warnings are not produced if the final stage of compilation is not reached, for example because an error is found during compilation, or because the -fsyntax-only option is being used. [GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR, -Wselector]";

"[GCC_WARN_STRICT_SELECTOR_MATCH]-name" = "Strict Selector Matching";
"[GCC_WARN_STRICT_SELECTOR_MATCH]-description" = "Warn if multiple methods with differing argument and/or return types are found for a given selector when attempting to send a message using this selector to a receiver of type \"id\" or \"Class\".  When this setting is disabled, the compiler will omit such warnings if any differences found are confined to types which share the same size and alignment. [GCC_WARN_STRICT_SELECTOR_MATCH, -Wstrict-selector-match]";

"[GCC_WARN_UNDECLARED_SELECTOR]-name" = "Undeclared Selector";
"[GCC_WARN_UNDECLARED_SELECTOR]-description" = "Warn if a \"@selector(...)\" expression referring to an undeclared selector is found.  A selector is considered undeclared if no method with that name has been declared before the \"@selector(...)\" expression, either explicitly in an @interface or @protocol declaration, or implicitly in an @implementation section.  This option always performs its checks as soon as a \"@selector(...)\" expression is found, while -Wselector only performs its checks in the final stage of compilation.  This also enforces the coding style convention that methods and selectors must be declared before being used. [GCC_WARN_UNDECLARED_SELECTOR, -Wundeclared-selector]";

"[CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS]-name" = "Overriding Deprecated Objective-C Methods";
"[CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS]-description" = "Warn if an Objective-C class either subclasses a deprecated class or overrides a method that has been marked deprecated.";

"[CLANG_WARN_OBJCPP_ARC_ABI]-name" = "Objective-C++ Automatic Reference Counting ABI incompatibilities";
"[CLANG_WARN_OBJCPP_ARC_ABI]-description" = "When compiling Objective-C++ code that uses Automatic Reference Counting, report code that may cause ABI issues when linking ARC code with traditional manual reference counting code.";
"[CLANG_WARN_OBJCPP_ARC_ABI]-value-[NO]" = "No";
"[CLANG_WARN_OBJCPP_ARC_ABI]-value-[YES]" = "Yes";

"[CLANG_WARN_CXX0X_EXTENSIONS]-name" = "Using C++11 extensions in earlier versions of C++";
"[CLANG_WARN_CXX0X_EXTENSIONS]-description" = "When compiling C++ code using a language standard older than C++11, warn about the use of C++11 extensions.";
"[CLANG_WARN_CXX0X_EXTENSIONS]-value-[NO]" = "No";
"[CLANG_WARN_CXX0X_EXTENSIONS]-value-[YES]" = "Yes";

"[WARNING_CFLAGS]-name" = "Other Warning Flags";
"[WARNING_CFLAGS]-description" = "Space-separated list of additional warning flags to pass to the compiler. Use this setting if Xcode does not already provide UI for a particular compiler warning flag. [WARNING_CFLAGS]";


"[CodeGeneration]-category" = "Code Generation";

"[GCC_GENERATE_DEBUGGING_SYMBOLS]-name" = "Generate Debug Symbols";
"[GCC_GENERATE_DEBUGGING_SYMBOLS]-description" = "Enables or disables generation of debug symbols.  When debug symbols are enabled, the level of detail can be controlled by the build 'Level of Debug Symbols' setting. [GCC_GENERATE_DEBUGGING_SYMBOLS]";
"[GCC_GENERATE_DEBUGGING_SYMBOLS]-value-[NO]" = "No";
"[GCC_GENERATE_DEBUGGING_SYMBOLS]-value-[YES]" = "Yes";

"[CLANG_DEBUG_INFORMATION_LEVEL]-name" = "Debug Information Level";
"[CLANG_DEBUG_INFORMATION_LEVEL]-description" = "Toggles the amount of debug information emitted when debug symbols are enabled.  This can impact the size of the generated debug information, which can matter in some cases for large projects (such as when using LTO).  [CLANG_DEBUG_INFORMATION_LEVEL]";
"[CLANG_DEBUG_INFORMATION_LEVEL]-value-[default]" = "Compiler default";
"[CLANG_DEBUG_INFORMATION_LEVEL]-value-[line-tables-only]" = "Line tables only";

"[GCC_OPTIMIZATION_LEVEL]-name" = "Optimization Level";
"[GCC_OPTIMIZATION_LEVEL]-description" = "None: Do not optimize. [-O0]

With this setting, the compiler's goal is to reduce the cost of compilation and to make debugging produce the expected results.  Statements are independent: if you stop the program with a breakpoint between statements, you can then assign a new value to any variable or change the program counter to any other statement in the function and get exactly the results you would expect from the source code.

Fast: Optimizing compilation takes somewhat more time, and a lot more memory for a large function. [-O, -O1]

 With this setting, the compiler tries to reduce code size and execution time, without performing any optimizations that take a great deal of compilation time. In Apple's compiler, strict aliasing, block reordering, and inter-block scheduling are disabled by default when optimizing.

Faster: The compiler performs nearly all supported optimizations that do not involve a space-speed tradeoff. [-O2]

With this setting, the compiler does not perform loop unrolling or function inlining, or register renaming.  As compared to the 'Fast' setting, this setting increases both compilation time and the performance of the generated code.

Fastest: Turns on all optimizations specified by the 'Faster' setting and also turns on function inlining and register renaming options. This setting may result in a larger binary. [-O3]

Fastest, Smallest: Optimize for size.  This setting enables all 'Faster' optimizations that do not typically increase code size.  It also performs further optimizations designed to reduce code size. [-Os]

Fastest, Aggressive Optimizations: This setting enables 'Fastest' but also enables aggressive optimizations that may break strict standards compliance but should work well on well-behaved code.  [-Ofast]

[GCC_OPTIMIZATION_LEVEL]";
"[GCC_OPTIMIZATION_LEVEL]-value-[0]" = "None [-O0]";
"[GCC_OPTIMIZATION_LEVEL]-value-[1]" = "Fast [-O, O1]";
"[GCC_OPTIMIZATION_LEVEL]-value-[2]" = "Faster [-O2]";
"[GCC_OPTIMIZATION_LEVEL]-value-[3]" = "Fastest [-O3]";
"[GCC_OPTIMIZATION_LEVEL]-value-[fast]" = "Fastest, Aggressive Optimizations [-Ofast]";
"[GCC_OPTIMIZATION_LEVEL]-value-[s]" = "Fastest, Smallest [-Os]";

"[LLVM_LTO]-name" = "Link-Time Optimization";
"[LLVM_LTO]-description" = "Enabling this setting allows the optimizer to look across object files in your program and optimize across file boundaries during linking.  [LLVM_LTO, -flto]";
"[LLVM_LTO]-value-[NO]" = "No";
"[LLVM_LTO]-value-[YES]" = "Yes";

"[GCC_NO_COMMON_BLOCKS]-name" = "No Common Blocks";
"[GCC_NO_COMMON_BLOCKS]-description" = "In C, allocate even uninitialized global variables in the data section of the object file, rather than generating them as common blocks.  This has the effect that if the same variable is declared (without extern ) in two different compilations, you will get an error when you link them.  The only reason this might be useful is if you wish to verify that the program will work on other systems which always work this way.  [GCC_NO_COMMON_BLOCKS, -fno-common]";
"[GCC_NO_COMMON_BLOCKS]-value-[NO]" = "No";
"[GCC_NO_COMMON_BLOCKS]-value-[YES]" = "Yes";

"[GCC_REUSE_STRINGS]-name" = "Make Strings Read-Only";
"[GCC_REUSE_STRINGS]-description" = "Reuse string literals. [GCC_REUSE_STRINGS, -fwritable-strings]";
"[GCC_REUSE_STRINGS]-value-[NO]" = "No";
"[GCC_REUSE_STRINGS]-value-[YES]" = "Yes";

"[GCC_DYNAMIC_NO_PIC]-name" = "Generate Position-Dependent Code";
"[GCC_DYNAMIC_NO_PIC]-description" = "Faster function calls for applications. Not appropriate for shared libraries (which need to be position-independent). [GCC_DYNAMIC_NO_PIC, -mdynamic-no-pic]";
"[GCC_DYNAMIC_NO_PIC]-value-[NO]" = "No";
"[GCC_DYNAMIC_NO_PIC]-value-[YES]" = "Yes";

"[GCC_WARN_UNUSED_PARAMETER]-name" = "Unused Parameters";
"[GCC_WARN_UNUSED_PARAMETER]-description" = "Warn whenever a function parameter is unused aside from its declaration.  [GCC_WARN_UNUSED_PARAMETER, -Wunused-parameter]";
"[GCC_WARN_UNUSED_PARAMETER]-value-[NO]" = "No";
"[GCC_WARN_UNUSED_PARAMETER]-value-[YES]" = "Yes";

"[GCC_WARN_UNUSED_VARIABLE]-name" = "Unused Variables";
"[GCC_WARN_UNUSED_VARIABLE]-description" = "Warn whenever a local variable or non-constant static variable is unused aside from its declaration.  [GCC_WARN_UNUSED_VARIABLE, -Wunused-variable]";
"[GCC_WARN_UNUSED_VARIABLE]-value-[NO]" = "No";
"[GCC_WARN_UNUSED_VARIABLE]-value-[YES]" = "Yes";

"[GCC_WARN_UNUSED_VALUE]-name" = "Unused Values";
"[GCC_WARN_UNUSED_VALUE]-description" = "Warn whenever a statement computes a result that is explicitly not used.  [GCC_WARN_UNUSED_VALUE, -Wunused-value]";
"[GCC_WARN_UNUSED_VALUE]-value-[NO]" = "No";
"[GCC_WARN_UNUSED_VALUE]-value-[YES]" = "Yes";

"[GCC_CW_ASM_SYNTAX]-name" = "CodeWarrior/MS-Style Inline Assembly";
"[GCC_CW_ASM_SYNTAX]-description" = "Enable the CodeWarrior/Microsoft syntax for inline assembly code in addition to the standard GCC syntax. [GCC_CW_ASM_SYNTAX, -fasm-blocks]";
"[GCC_CW_ASM_SYNTAX]-value-[NO]" = "No";
"[GCC_CW_ASM_SYNTAX]-value-[YES]" = "Yes";

"[GCC_UNROLL_LOOPS]-name" = "Unroll Loops";
"[GCC_UNROLL_LOOPS]-description" = "Unrolls loops. Unrolling makes the code larger, but may make it faster by reducing the number of branches executed. [GCC_UNROLL_LOOPS, -funroll-loops]";
"[GCC_UNROLL_LOOPS]-value-[NO]" = "No";
"[GCC_UNROLL_LOOPS]-value-[YES]" = "Yes";

"[GCC_FAST_MATH]-name" = "Relax IEEE Compliance";
"[GCC_FAST_MATH]-description" = "Enables some floating point optimizations that are not IEEE754-compliant, but which usually work. Programs which require strict IEEE compliance may not work with this option. [GCC_FAST_MATH, -ffast-math]";
"[GCC_FAST_MATH]-value-[NO]" = "No";
"[GCC_FAST_MATH]-value-[YES]" = "Yes";

"[GCC_STRICT_ALIASING]-name" = "Enforce Strict Aliasing";
"[GCC_STRICT_ALIASING]-description" = "Optimize code by making more aggressive assumptions about whether pointers can point to the same objects as other pointers. Programs which use pointers a lot may benefit from this, but programs that don't strictly follow the ISO C rules about the type with which an object may be accessed may behave unexpectedly. [GCC_STRICT_ALIASING, -fstrict-aliasing]";
"[GCC_STRICT_ALIASING]-value-[NO]" = "No";
"[GCC_STRICT_ALIASING]-value-[YES]" = "Yes";

"[GCC_INSTRUMENT_PROGRAM_FLOW_ARCS]-name" = "Instrument Program Flow";
"[GCC_INSTRUMENT_PROGRAM_FLOW_ARCS]-description" = "Activating this setting indicates that code should be added so program flow arcs are instrumented. [GCC_INSTRUMENT_PROGRAM_FLOW_ARCS, -fprofile-arcs]";
"[GCC_INSTRUMENT_PROGRAM_FLOW_ARCS]-value-[NO]" = "No";
"[GCC_INSTRUMENT_PROGRAM_FLOW_ARCS]-value-[YES]" = "Yes";

"[GCC_GENERATE_TEST_COVERAGE_FILES]-name" = "Generate Test Coverage Files";
"[GCC_GENERATE_TEST_COVERAGE_FILES]-description" = "Activating this setting causes a 'notes' file to be produced that the gcov code-coverage utility can use to show program coverage. [GCC_GENERATE_TEST_COVERAGE_FILES, -ftest-coverage]";
"[GCC_GENERATE_TEST_COVERAGE_FILES]-value-[NO]" = "No";
"[GCC_GENERATE_TEST_COVERAGE_FILES]-value-[YES]" = "Yes";

"[GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL]-name" = "Incomplete Objective-C Protocols";
"[GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL]-description" = "Warn if methods required by a protocol are not implemented in the class adopting it.  Only applies to Objective-C. [GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL, -Wno-protocol]";
"[GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL]-value-[NO]" = "No";
"[GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL]-value-[YES]" = "Yes";

"[GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS]-name" = "Deprecated Functions";
"[GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS]-description" = "Warn about the use of deprecated functions, variables, and types (as indicated by the 'deprecated' attribute).  [GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS, -Wno-deprecated-declarations]";
"[GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS]-value-[NO]" = "No";
"[GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS]-value-[YES]" = "Yes";

"[GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO]-name" = "Undefined Use of offsetof Macro";
"[GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO]-description" = "Unchecking this setting will suppress warnings from applying the offsetof macro to a non-POD type.  According to the 1998 ISO C++ standard, applying offsetof to a non-POD type is undefined.  In existing C++ implementations, however, offsetof typically gives meaningful results even when applied to certain kinds of non-POD types. (Such as a simple struct that fails to be a POD type only by virtue of having a constructor.)  This flag is for users who are aware that they are writing non-portable code and who have deliberately chosen to ignore the warning about it.

The restrictions on offsetof may be relaxed in a future version of the C++ standard. [GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO, -Wno-invalid-offsetof]";
"[GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO]-value-[NO]" = "No";
"[GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO]-value-[YES]" = "Yes";

"[GCC_FAST_OBJC_DISPATCH]-name" = "Accelerated Objective-C Dispatch";
"[GCC_FAST_OBJC_DISPATCH]-description" = "This setting enables highly accelerated dispatch to the Objective-C runtime.  Only applies to Objective-C. [GCC_FAST_OBJC_DISPATCH, -fobjc-direct-dispatch]";
"[GCC_FAST_OBJC_DISPATCH]-value-[NO]" = "No";
"[GCC_FAST_OBJC_DISPATCH]-value-[YES]" = "Yes";

"[CLANG_ENABLE_OBJC_ARC]-name" = "Objective-C Automatic Reference Counting";
"[CLANG_ENABLE_OBJC_ARC]-description" = "Compiles reference-counted Objective-C code (when garbage collection is not enabled) to use Automatic Reference Counting.
Code compiled using automated reference counting is compatible with other code (e.g., frameworks) compiled using either
manual reference counting (i.e., traditional \"retain\" and \"release\" messages) or automated reference counting.  Using this mode is currently
incompatible with compiling code to use Objective-C Garbage Collection.";
"[CLANG_ENABLE_OBJC_ARC]-value-[YES]" = "Use automated reference counting";
"[CLANG_ENABLE_OBJC_ARC]-value-[NO]" = "Use manual (traditional) reference counting";

"[CLANG_LINK_OBJC_RUNTIME]-name" = "Implicitly Link Objective-C Runtime Support";
"[CLANG_LINK_OBJC_RUNTIME]-description" = "When linking a target using Objective-C
code, implicitly link in Foundation (and if deploying back to an older OS) a
backwards compatibility library to allow newer language features to run on
an OS where the runtime support is not natively available.  Most targets
that use Objective-C will want to use this, although there are rare cases
where a target may wish to opt out of this behavior.";
"[CLANG_LINK_OBJC_RUNTIME]-value-[YES]" = "Yes";
"[CLANG_LINK_OBJC_RUNTIME]-value-[No]" = "No";

"[CLANG_ENABLE_MODULES]-name" = "Enable Modules (C and Objective-C)";
"[CLANG_ENABLE_MODULES]-description" = "Enables the use of modules for system APIs.  System headers are imported as semantic modules instead of raw headers.  This can result in faster builds and project indexing.  [CLANG_ENABLE_MODULES, -fmodules]";
"[CLANG_ENABLE_MODULES]-value-[YES]" = "Yes";
"[CLANG_ENABLE_MODULES]-value-[NO]" = "No";

"[CLANG_MODULES_AUTOLINK]-name" = "Link Frameworks Automatically";
"[CLANG_MODULES_AUTOLINK]-description" = "Automatically link SDK frameworks that are referenced using a #import/#include.  This feature requires also enabling support for modules.  [CLANG_MODULES_AUTOLINK, -fmodules-autolink]";
"[CLANG_MODULES_AUTOLINK]-value-[YES]" = "Yes (when modules are enabled)";
"[CLANG_MODULES_AUTOLINK]-value-[NO]" = "No";

"[GCC_ENABLE_EXCEPTIONS]-name" = "Enable Exceptions";
"[GCC_ENABLE_EXCEPTIONS]-description" = "Enable exception handling.  Generates extra code needed to propagate exceptions.  For some targets, this implies GCC will generate frame unwind information for all functions, which can produce significant data size overhead, although it does not affect execution.  If you do not specify this option, GCC will enable it by default for languages like C++ and Objective-C which normally require exception handling, and disable it for languages like C that do not normally require it.  However, you may need to enable this option when compiling C code that needs to interoperate properly with exception handlers written in other languages.  You may also wish to disable this option if you are compiling older programs that don't use exception handling.  [GCC_ENABLE_EXCEPTIONS, -fexceptions]";
"[GCC_ENABLE_EXCEPTIONS]-value-[NO]" = "No";
"[GCC_ENABLE_EXCEPTIONS]-value-[YES]" = "Yes";

"[GCC_ENABLE_OBJC_EXCEPTIONS]-name" = "Enable Objective-C Exceptions";
"[GCC_ENABLE_OBJC_EXCEPTIONS]-description" = "This setting enables @try/@catch/@throw syntax for handling exceptions in Objective-C code.  Only applies to Objective-C.  [GCC_ENABLE_OBJC_EXCEPTIONS, -fno-objc-exceptions]";
"[GCC_ENABLE_OBJC_EXCEPTIONS]-value-[NO]" = "No";
"[GCC_ENABLE_OBJC_EXCEPTIONS]-value-[YES]" = "Yes";

"[CLANG_X86_VECTOR_INSTRUCTIONS]-value-[default]" = "Platform default";
"[CLANG_X86_VECTOR_INSTRUCTIONS]-value-[sse3]" = "SSE 3";
"[CLANG_X86_VECTOR_INSTRUCTIONS]-value-[ssse3]" = "SSE 3 (with supplemental extensions)";
"[CLANG_X86_VECTOR_INSTRUCTIONS]-value-[sse4.1]" = "SSE 4.1";
"[CLANG_X86_VECTOR_INSTRUCTIONS]-value-[sse4.2]" = "SSE 4.2";
"[CLANG_X86_VECTOR_INSTRUCTIONS]-value-[avx]" = "AVX";
"[CLANG_X86_VECTOR_INSTRUCTIONS]-value-[avx2]" = "AVX 2";

"[GCC_SYMBOLS_PRIVATE_EXTERN]-name" = "Symbols Hidden by Default";
"[GCC_SYMBOLS_PRIVATE_EXTERN]-description" = "When enabled, all symbols are declared 'private extern' unless explicitly marked to be exported using '__attribute__((visibility(\"default\")))' in code. If not enabled, all symbols are exported unless explicitly marked as 'private extern'.

For more information, see <http://developer.apple.com/documentation/DeveloperTools/Conceptual/CppRuntimeEnv/Articles/SymbolVisibility.html>.

[GCC_SYMBOLS_PRIVATE_EXTERN, -fvisibility=hidden]";
"[GCC_SYMBOLS_PRIVATE_EXTERN]-value-[NO]" = "No";
"[GCC_SYMBOLS_PRIVATE_EXTERN]-value-[YES]" = "Yes";

"[GCC_INLINES_ARE_PRIVATE_EXTERN]-name" = "Inline Methods Hidden";
"[GCC_INLINES_ARE_PRIVATE_EXTERN]-description" = "When enabled, out-of-line copies of inline methods are declared 'private extern'. [GCC_INLINES_ARE_PRIVATE_EXTERN, -fvisibility-inlines-hidden]";
"[GCC_INLINES_ARE_PRIVATE_EXTERN]-value-[NO]" = "No";
"[GCC_INLINES_ARE_PRIVATE_EXTERN]-value-[YES]" = "Yes";

"[GCC_ENABLE_KERNEL_DEVELOPMENT]-name" = "Kernel Development Mode";
"[GCC_ENABLE_KERNEL_DEVELOPMENT]-description" = "Activating this setting enables kernel development mode.  This mode sets -static, -fno-common, -fno-cxa-atexit, -fno-exceptions, -fno-non-call-exceptions, -fapple-kext, -fno-weak and -fno-rtti where applicable.  This mode also sets -mno-altivec, -msoft-float, -fno-builtin and -mlong-branch for PowerPC targets. [GCC_ENABLE_KERNEL_DEVELOPMENT, -mkernel]";
"[GCC_ENABLE_KERNEL_DEVELOPMENT]-value-[NO]" = "No";
"[GCC_ENABLE_KERNEL_DEVELOPMENT]-value-[YES]" = "Yes";

"[GCC_WARN_ABOUT_POINTER_SIGNEDNESS]-name" = "Pointer Sign Comparison";
"[GCC_WARN_ABOUT_POINTER_SIGNEDNESS]-description" = "Warn when pointers passed via arguments or assigned to a variable differ in sign.  [GCC_WARN_ABOUT_POINTER_SIGNEDNESS, -Wno-pointer-sign]";
"[GCC_WARN_ABOUT_POINTER_SIGNEDNESS]-value-[NO]" = "No";
"[GCC_WARN_ABOUT_POINTER_SIGNEDNESS]-value-[YES]" = "Yes";

"[GCC_WARN_ABOUT_MISSING_NEWLINE]-name" = "Missing Newline At End Of File";
"[GCC_WARN_ABOUT_MISSING_NEWLINE]-description" = "Warn when a source file does not end with a newline.  [GCC_WARN_ABOUT_MISSING_NEWLINE, -Wnewline-eof]";
"[GCC_WARN_ABOUT_MISSING_NEWLINE]-value-[NO]" = "No";
"[GCC_WARN_ABOUT_MISSING_NEWLINE]-value-[YES]" = "Yes";

"[CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION]-name" = "Suspicious Implicit Conversions";
"[CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION]-description" = "Warn about various implicit conversions that can lose information or are otherwise suspicious.  [CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION, -Wconversion]";
"[CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION]-value-[NO]" = "No";
"[CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION]-value-[YES]" = "Yes";

"[CLANG_WARN_CONSTANT_CONVERSION]-name" = "Implicit Constant Conversions";
"[CLANG_WARN_CONSTANT_CONVERSION]-description" = "Warn about implicit conversions of constant values that cause the constant value to change, either through a loss of precision, or entirely in its meaning.  [CLANG_WARN_CONSTANT_CONVERSION, -Wconstant-conversion]";
"[CLANG_WARN_CONSTANT_CONVERSION]-value-[NO]" = "No";
"[CLANG_WARN_CONSTANT_CONVERSION]-value-[YES]" = "Yes";

"[CLANG_WARN_INT_CONVERSION]-name" = "Implicit Integer to Pointer Conversions";
"[CLANG_WARN_INT_CONVERSION]-description" = "Warn about implicit conversions between pointers and integers.  For example, this can catch issues when one incorrectly intermixes using NSNumber*'s and raw integers.  [CLANG_WARN_INT_CONVERSION, -Wint-conversion]";
"[CLANG_WARN_INT_CONVERSION]-value-[NO]" = "No";
"[CLANG_WARN_INT_CONVERSION]-value-[YES]" = "Yes";

"[CLANG_WARN_BOOL_CONVERSION]-name" = "Implicit Boolean Conversions";
"[CLANG_WARN_BOOL_CONVERSION]-description" = "Warn about implicit conversions to boolean values that are suspicious.  For example, writing 'if (foo)' with 'foo' being the name a function will trigger a warning.  [CLANG_WARN_BOOL_CONVERSION, -Wbool-conversion]";
"[CLANG_WARN_BOOL_CONVERSION]-value-[NO]" = "No";
"[CLANG_WARN_BOOL_CONVERSION]-value-[YES]" = "Yes";

"[CLANG_WARN_ENUM_CONVERSION]-name" = "Implicit Enum Conversions";
"[CLANG_WARN_ENUM_CONVERSION]-description" = "Warn about implicit conversions between different kinds of enum values.  For example, this can catch issues when using the wrong enum flag as an argument to a function or method.  [CLANG_WARN_ENUM_CONVERSION, -Wenum-conversion]";
"[CLANG_WARN_ENUM_CONVERSION]-value-[NO]" = "No";
"[CLANG_WARN_ENUM_CONVERSION]-value-[YES]" = "Yes";

"[CLANG_WARN_IMPLICIT_SIGN_CONVERSION]-name" = "Implicit Signedness Conversions";
"[CLANG_WARN_IMPLICIT_SIGN_CONVERSION]-description" = "Warn about implicit integer conversions that change the signedness of an integer value.  [CLANG_WARN_IMPLICIT_SIGN_CONVERSION, -Wsign-conversion]";
"[CLANG_WARN_IMPLICIT_SIGN_CONVERSION]-value-[NO]" = "No";
"[CLANG_WARN_IMPLICIT_SIGN_CONVERSION]-value-[YES]" = "Yes";

"[GCC_WARN_64_TO_32_BIT_CONVERSION]-name" = "Implicit Conversion to 32 Bit Type";
"[GCC_WARN_64_TO_32_BIT_CONVERSION]-description" = "Warn if a value is implicitly converted from a 64 bit type to a 32 bit type.  This is a subset
of the warnings provided by -Wconversion.  [GCC_WARN_64_TO_32_BIT_CONVERSION, -Wshorten-64-to-32]";
"[GCC_WARN_64_TO_32_BIT_CONVERSION]-value-[NO]" = "No";
"[GCC_WARN_64_TO_32_BIT_CONVERSION]-value-[YES]" = "Yes";

"[SAPolicy]-category" = "Analysis Policy";
"[SACheckers]-category" = "Generic Issues";
"[SAObjCCheckers]-category" = "Issues - Objective-C";
"[SASecurityCheckers]-category" = "Issues - Security";

"[RUN_CLANG_STATIC_ANALYZER]-name" = "Analyze During 'Build'";
"[RUN_CLANG_STATIC_ANALYZER]-description" = "Activating this setting will cause Xcode to run the Clang static analysis tool on qualifying source files during every build.";

"[CLANG_STATIC_ANALYZER_MODE]-name" = "Mode of Analysis for 'Build'";
"[CLANG_STATIC_ANALYZER_MODE]-description" = "The depth the static analyzer uses during the Build action. Use Deep to exercise the full power of the analyzer. Use Shallow for faster analysis.";
"[CLANG_STATIC_ANALYZER_MODE]-value-[shallow]" = "Shallow (faster)";
"[CLANG_STATIC_ANALYZER_MODE]-value-[deep]" = "Deep";

"[CLANG_STATIC_ANALYZER_MODE_ON_ANALYZE_ACTION]-name" = "Mode of Analysis for 'Analyze'";
"[CLANG_STATIC_ANALYZER_MODE_ON_ANALYZE_ACTION]-description" = "The depth the static analyzer uses during the Analyze action. Use Deep to exercise the full power of the analyzer. Use Shallow for faster analysis.";
"[CLANG_STATIC_ANALYZER_MODE_ON_ANALYZE_ACTION]-value-[shallow]" = "Shallow (faster)";
"[CLANG_STATIC_ANALYZER_MODE_ON_ANALYZE_ACTION]-value-[deep]" = "Deep";

"[CLANG_ANALYZER_DEADCODE_DEADSTORES]-name" = "Dead Stores";
"[CLANG_ANALYZER_DEADCODE_DEADSTORES]-description" = "Check for values stored to variables that are never read afterwards.";
"[CLANG_ANALYZER_DEADCODE_DEADSTORES]-value-[NO]" = "No";
"[CLANG_ANALYZER_DEADCODE_DEADSTORES]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_OBJC_COLLECTIONS]-name" = "Misuse of Collections API";
"[CLANG_ANALYZER_OBJC_COLLECTIONS]-description" = "Warn if CF collections are created with non-pointer-size values. Check if NS collections are initialized with non-Objective-C type elements.";
"[CLANG_ANALYZER_OBJC_COLLECTIONS]-value-[NO]" = "No";
"[CLANG_ANALYZER_OBJC_COLLECTIONS]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_OBJC_NSCFERROR]-name" = "Improper Handling of CFError and NSError";
"[CLANG_ANALYZER_OBJC_NSCFERROR]-description" = "Warn if functions accepting CFErrorRef or NSError cannot indicate if error occured.";
"[CLANG_ANALYZER_OBJC_NSCFERROR]-value-[NO]" = "No";
"[CLANG_ANALYZER_OBJC_NSCFERROR]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_OBJC_INCOMP_METHOD_TYPES]-name" = "Method Signatures Mismatch";
"[CLANG_ANALYZER_OBJC_INCOMP_METHOD_TYPES]-description" = "Warn about Objective-C method signatures with type incompatibilities.";
"[CLANG_ANALYZER_OBJC_INCOMP_METHOD_TYPES]-value-[NO]" = "No";
"[CLANG_ANALYZER_OBJC_INCOMP_METHOD_TYPES]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_MEMORY_MANAGEMENT]-name" = "Improper Memory Management";
"[CLANG_ANALYZER_MEMORY_MANAGEMENT]-description" = "Warn about memory leaks, use-after-free, as well as other API misuse.";
"[CLANG_ANALYZER_MEMORY_MANAGEMENT]-value-[NO]" = "No";
"[CLANG_ANALYZER_MEMORY_MANAGEMENT]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_OBJC_RETAIN_COUNT]-name" = "Violation of Reference Counting Rules";
"[CLANG_ANALYZER_OBJC_RETAIN_COUNT]-description" = "Warn on leaks and improper reference count management.";
"[CLANG_ANALYZER_OBJC_RETAIN_COUNT]-value-[NO]" = "No";
"[CLANG_ANALYZER_OBJC_RETAIN_COUNT]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_OBJC_ATSYNC]-name" = "@synchronized with nil mutex";
"[CLANG_ANALYZER_OBJC_ATSYNC]-description" = "Warn on nil pointers used as mutexes for @synchronized.";
"[CLANG_ANALYZER_OBJC_ATSYNC]-value-[NO]" = "No";
"[CLANG_ANALYZER_OBJC_ATSYNC]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_GCD]-name" = "Misuse of Grand Central Dispatch";
"[CLANG_ANALYZER_GCD]-description" = "Check for misuses of Grand Central Dispatch API.";
"[CLANG_ANALYZER_GCD]-value-[NO]" = "No";
"[CLANG_ANALYZER_GCD]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_DEADCODE_IDEMPOTENT_OPERATIONS]-name" = "Idempotent Operations";
"[CLANG_ANALYZER_DEADCODE_IDEMPOTENT_OPERATIONS]-description" =
"This checker is a form of dead code analysis, and flags various \"idempotent operations\" (operations that effectively
  do nothing).  Examples include always assigning a value to variable that
  never changes the original value, always adding 0 to a variable, etc.";

"[CLANG_ANALYZER_DEADCODE_IDEMPOTENT_OPERATIONS]-value-[NO]" = "No";
"[CLANG_ANALYZER_DEADCODE_IDEMPOTENT_OPERATIONS]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_SECURITY_BUFFER_OVERFLOW_EXPERIMENTAL]-name" = "*EXPERIMENTAL* Buffer overflows";
"[CLANG_ANALYZER_SECURITY_BUFFER_OVERFLOW_EXPERIMENTAL]-description" = "Check for potential buffer overflows.";
"[CLANG_ANALYZER_SECURITY_BUFFER_OVERFLOW_EXPERIMENTAL]-value-[NO]" = "No";
"[CLANG_ANALYZER_SECURITY_BUFFER_OVERFLOW_EXPERIMENTAL]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_OBJC_SELF_INIT]-name" = "Violation of 'self = [super init]' Rule";
"[CLANG_ANALYZER_OBJC_SELF_INIT]-description" = "Check that [super init] is properly called within an Objective-C initialization method.";
"[CLANG_ANALYZER_OBJC_SELF_INIT]-value-[NO]" = "No";
"[CLANG_ANALYZER_OBJC_SELF_INIT]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_OBJC_UNUSED_IVARS]-name" = "Unused Ivars";
"[CLANG_ANALYZER_OBJC_UNUSED_IVARS]-description" = "Warn about private ivars that are never used.";
"[CLANG_ANALYZER_OBJC_UNUSED_IVARS]-value-[NO]" = "No";
"[CLANG_ANALYZER_OBJC_UNUSED_IVARS]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_SECURITY_KEYCHAIN_API]-name" = "Misuse of Keychain Services API";
"[CLANG_ANALYZER_SECURITY_KEYCHAIN_API]-description" = "Check for misuse of Keychain Services API.";
"[CLANG_ANALYZER_SECURITY_KEYCHAIN_API]-value-[NO]" = "No";
"[CLANG_ANALYZER_SECURITY_KEYCHAIN_API]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER]-name" = "Floating Point Value used as Loop Counter";
"[CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER]-description" = "Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-CPP).";
"[CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER]-value-[NO]" = "No";
"[CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN]-name" = "Unchecked Return Values";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN]-description" = "Warn on uses of sensitive functions whose return values must be always checked.";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN]-value-[NO]" = "No";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS]-name" = "Use of 'getpw', 'gets' (buffer overflow)";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS]-description" = "Warn on uses of 'getpw' and 'gets'.  The functions are dangerous as they may trigger a buffer overflow.";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS]-value-[NO]" = "No";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP]-name" = "Use of 'mktemp' or Predictable 'mktemps'";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP]-description" = "Warn on uses of 'mktemp', which produces predictable temporay files. It is obsoleted by 'mktemps'. Warn when 'mkstemp' is passed fewer than 6 X's in the format string.";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP]-value-[NO]" = "No";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND]-name" = "Use of 'rand' Functions";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND]-description" = "Warn on uses of 'rand', 'random', and related functions which produce predictable random number sequences.  Use arc4random instead.";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND]-value-[NO]" = "No";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY]-name" = "Use of 'strcpy' and 'strcat'";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY]-description" = "Warn on uses of the 'strcpy' and 'strcat' functions, which can result in buffer overflows.
Use 'strlcpy' or 'strlcat' instead.";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY]-value-[NO]" = "No";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY]-value-[YES]" = "Yes";

"[CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK]-name" = "Use of 'vfork'";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK]-description" = "Warn on uses of the 'vfork' function, which is inherently insecure.  Use the safer 'posix_spawn' function instead.";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK]-value-[NO]" = "No";
"[CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK]-value-[YES]" = "Yes";
